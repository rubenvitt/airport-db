/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as FlightsRouteImport } from './routes/flights'
import { Route as FavoritesRouteImport } from './routes/favorites'
import { Route as AirportsRouteImport } from './routes/airports'
import { Route as R404RouteImport } from './routes/_404'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FlightsFlightIdRouteImport } from './routes/flights.$flightId'
import { Route as AirportsIataCodeRouteImport } from './routes/airports.$iataCode'
import { ServerRoute as ApiDemoNamesServerRouteImport } from './routes/api.demo-names'

const rootServerRouteImport = createServerRootRoute()

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const FlightsRoute = FlightsRouteImport.update({
  id: '/flights',
  path: '/flights',
  getParentRoute: () => rootRouteImport,
} as any)
const FavoritesRoute = FavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRouteImport,
} as any)
const AirportsRoute = AirportsRouteImport.update({
  id: '/airports',
  path: '/airports',
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: '/_404',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FlightsFlightIdRoute = FlightsFlightIdRouteImport.update({
  id: '/$flightId',
  path: '/$flightId',
  getParentRoute: () => FlightsRoute,
} as any)
const AirportsIataCodeRoute = AirportsIataCodeRouteImport.update({
  id: '/$iataCode',
  path: '/$iataCode',
  getParentRoute: () => AirportsRoute,
} as any)
const ApiDemoNamesServerRoute = ApiDemoNamesServerRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/airports': typeof AirportsRouteWithChildren
  '/favorites': typeof FavoritesRoute
  '/flights': typeof FlightsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/airports/$iataCode': typeof AirportsIataCodeRoute
  '/flights/$flightId': typeof FlightsFlightIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/airports': typeof AirportsRouteWithChildren
  '/favorites': typeof FavoritesRoute
  '/flights': typeof FlightsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/airports/$iataCode': typeof AirportsIataCodeRoute
  '/flights/$flightId': typeof FlightsFlightIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_404': typeof R404Route
  '/airports': typeof AirportsRouteWithChildren
  '/favorites': typeof FavoritesRoute
  '/flights': typeof FlightsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/airports/$iataCode': typeof AirportsIataCodeRoute
  '/flights/$flightId': typeof FlightsFlightIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/airports'
    | '/favorites'
    | '/flights'
    | '/settings'
    | '/airports/$iataCode'
    | '/flights/$flightId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/airports'
    | '/favorites'
    | '/flights'
    | '/settings'
    | '/airports/$iataCode'
    | '/flights/$flightId'
  id:
    | '__root__'
    | '/'
    | '/_404'
    | '/airports'
    | '/favorites'
    | '/flights'
    | '/settings'
    | '/airports/$iataCode'
    | '/flights/$flightId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  AirportsRoute: typeof AirportsRouteWithChildren
  FavoritesRoute: typeof FavoritesRoute
  FlightsRoute: typeof FlightsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
}
export interface FileServerRoutesByFullPath {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
}
export interface FileServerRoutesByTo {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/demo-names': typeof ApiDemoNamesServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/demo-names'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/demo-names'
  id: '__root__' | '/api/demo-names'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiDemoNamesServerRoute: typeof ApiDemoNamesServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flights': {
      id: '/flights'
      path: '/flights'
      fullPath: '/flights'
      preLoaderRoute: typeof FlightsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/airports': {
      id: '/airports'
      path: '/airports'
      fullPath: '/airports'
      preLoaderRoute: typeof AirportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_404': {
      id: '/_404'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flights/$flightId': {
      id: '/flights/$flightId'
      path: '/$flightId'
      fullPath: '/flights/$flightId'
      preLoaderRoute: typeof FlightsFlightIdRouteImport
      parentRoute: typeof FlightsRoute
    }
    '/airports/$iataCode': {
      id: '/airports/$iataCode'
      path: '/$iataCode'
      fullPath: '/airports/$iataCode'
      preLoaderRoute: typeof AirportsIataCodeRouteImport
      parentRoute: typeof AirportsRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AirportsRouteChildren {
  AirportsIataCodeRoute: typeof AirportsIataCodeRoute
}

const AirportsRouteChildren: AirportsRouteChildren = {
  AirportsIataCodeRoute: AirportsIataCodeRoute,
}

const AirportsRouteWithChildren = AirportsRoute._addFileChildren(
  AirportsRouteChildren,
)

interface FlightsRouteChildren {
  FlightsFlightIdRoute: typeof FlightsFlightIdRoute
}

const FlightsRouteChildren: FlightsRouteChildren = {
  FlightsFlightIdRoute: FlightsFlightIdRoute,
}

const FlightsRouteWithChildren =
  FlightsRoute._addFileChildren(FlightsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  AirportsRoute: AirportsRouteWithChildren,
  FavoritesRoute: FavoritesRoute,
  FlightsRoute: FlightsRouteWithChildren,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiDemoNamesServerRoute: ApiDemoNamesServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
