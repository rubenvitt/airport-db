"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_server_services_redisClient_ts";
exports.ids = ["_ssr_src_server_services_redisClient_ts"];
exports.modules = {

/***/ "(ssr)/./src/server/services/circuitBreaker.ts":
/*!***********************************************!*\
  !*** ./src/server/services/circuitBreaker.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircuitBreaker: () => (/* binding */ CircuitBreaker),\n/* harmony export */   CircuitState: () => (/* binding */ CircuitState),\n/* harmony export */   ExponentialBackoff: () => (/* binding */ ExponentialBackoff)\n/* harmony export */ });\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(ssr)/./src/lib/cache/observability/index.ts\");\n// Circuit breaker pattern implementation for resilient service calls\n\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__.StructuredLogger('circuit-breaker', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__.prettyTransport);\nvar CircuitState = /*#__PURE__*/ function(CircuitState) {\n    CircuitState[\"CLOSED\"] = \"CLOSED\";\n    CircuitState[\"OPEN\"] = \"OPEN\";\n    CircuitState[\"HALF_OPEN\"] = \"HALF_OPEN\";\n    return CircuitState;\n}({});\nclass CircuitBreaker {\n    constructor(options){\n        this.state = \"CLOSED\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.halfOpenRequestCount = 0;\n        this.name = options.name;\n        this.failureThreshold = options.failureThreshold || 5;\n        this.resetTimeout = options.resetTimeout || 60000 // 1 minute\n        ;\n        this.monitoringPeriod = options.monitoringPeriod || 10000 // 10 seconds\n        ;\n        this.halfOpenRequests = options.halfOpenRequests || 3;\n        this.onStateChange = options.onStateChange;\n    }\n    async execute(fn) {\n        // Check if circuit should transition from OPEN to HALF_OPEN\n        if (this.state === \"OPEN\") {\n            if (this.shouldTransitionToHalfOpen()) {\n                this.transitionTo(\"HALF_OPEN\");\n            } else {\n                throw new Error(`Circuit breaker ${this.name} is OPEN`);\n            }\n        }\n        // In HALF_OPEN state, limit the number of requests\n        if (this.state === \"HALF_OPEN\") {\n            if (this.halfOpenRequestCount >= this.halfOpenRequests) {\n                throw new Error(`Circuit breaker ${this.name} is HALF_OPEN and at request limit`);\n            }\n            this.halfOpenRequestCount++;\n        }\n        try {\n            const result = await fn();\n            this.onSuccess();\n            return result;\n        } catch (error) {\n            this.onFailure();\n            throw error;\n        }\n    }\n    onSuccess() {\n        this.failureCount = 0;\n        this.successCount++;\n        if (this.state === \"HALF_OPEN\") {\n            // If all half-open requests succeed, close the circuit\n            if (this.successCount >= this.halfOpenRequests) {\n                this.transitionTo(\"CLOSED\");\n            }\n        }\n        logger.debug('Circuit breaker request succeeded', {\n            name: this.name,\n            state: this.state,\n            successCount: this.successCount\n        });\n    }\n    onFailure() {\n        this.failureCount++;\n        this.lastFailureTime = Date.now();\n        this.successCount = 0;\n        logger.warn('Circuit breaker request failed', {\n            name: this.name,\n            state: this.state,\n            failureCount: this.failureCount,\n            threshold: this.failureThreshold\n        });\n        if (this.state === \"HALF_OPEN\") {\n            // Any failure in HALF_OPEN state reopens the circuit\n            this.transitionTo(\"OPEN\");\n        } else if (this.state === \"CLOSED\" && this.failureCount >= this.failureThreshold) {\n            // Too many failures in CLOSED state opens the circuit\n            this.transitionTo(\"OPEN\");\n        }\n    }\n    shouldTransitionToHalfOpen() {\n        if (!this.lastFailureTime) return false;\n        return Date.now() - this.lastFailureTime >= this.resetTimeout;\n    }\n    transitionTo(newState) {\n        const oldState = this.state;\n        this.state = newState;\n        // Reset counters on state transition\n        if (newState === \"HALF_OPEN\") {\n            this.halfOpenRequestCount = 0;\n            this.successCount = 0;\n        } else if (newState === \"CLOSED\") {\n            this.failureCount = 0;\n            this.successCount = 0;\n            this.halfOpenRequestCount = 0;\n        }\n        logger.info('Circuit breaker state changed', {\n            name: this.name,\n            oldState,\n            newState\n        });\n        if (this.onStateChange) {\n            this.onStateChange(oldState, newState);\n        }\n    }\n    getState() {\n        return this.state;\n    }\n    getStats() {\n        return {\n            name: this.name,\n            state: this.state,\n            failureCount: this.failureCount,\n            successCount: this.successCount,\n            lastFailureTime: this.lastFailureTime,\n            halfOpenRequestCount: this.halfOpenRequestCount\n        };\n    }\n    reset() {\n        this.transitionTo(\"CLOSED\");\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.lastFailureTime = undefined;\n        this.halfOpenRequestCount = 0;\n    }\n}\n// Exponential backoff helper\nclass ExponentialBackoff {\n    constructor(baseDelay = 1000, maxDelay = 30000, maxAttempts = 5){\n        this.attempt = 0;\n        this.baseDelay = baseDelay;\n        this.maxDelay = maxDelay;\n        this.maxAttempts = maxAttempts;\n    }\n    async execute(fn) {\n        let lastError = new Error('No attempts made');\n        for(let attempt = 0; attempt < this.maxAttempts; attempt++){\n            try {\n                const result = await fn();\n                this.reset();\n                return result;\n            } catch (error) {\n                lastError = error;\n                this.attempt = attempt + 1;\n                if (this.attempt >= this.maxAttempts) {\n                    logger.error('Max retry attempts reached', {\n                        attempts: this.attempt,\n                        maxAttempts: this.maxAttempts\n                    });\n                    throw error;\n                }\n                const delay = this.getDelay();\n                logger.warn('Retrying after backoff', {\n                    attempt: this.attempt,\n                    delay,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n                await this.sleep(delay);\n            }\n        }\n        throw lastError;\n    }\n    getDelay() {\n        // Exponential backoff with jitter\n        const exponentialDelay = Math.min(this.baseDelay * Math.pow(2, this.attempt - 1), this.maxDelay);\n        // Add jitter (Â±25%)\n        const jitter = exponentialDelay * 0.25;\n        return Math.floor(exponentialDelay + (Math.random() * 2 - 1) * jitter);\n    }\n    sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    reset() {\n        this.attempt = 0;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/server/services/circuitBreaker.ts\n");

/***/ }),

/***/ "(ssr)/./src/server/services/redisClient.ts":
/*!********************************************!*\
  !*** ./src/server/services/redisClient.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeRedisClient: () => (/* binding */ closeRedisClient),\n/* harmony export */   getRedisCircuitBreaker: () => (/* binding */ getRedisCircuitBreaker),\n/* harmony export */   getRedisClient: () => (/* binding */ getRedisClient),\n/* harmony export */   getRedisConfig: () => (/* binding */ getRedisConfig)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(ssr)/./src/lib/cache/observability/index.ts\");\n/* harmony import */ var _circuitBreaker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./circuitBreaker */ \"(ssr)/./src/server/services/circuitBreaker.ts\");\n/* harmony import */ var _secretsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./secretsManager */ \"(ssr)/./src/server/services/secretsManager.ts\");\n// Redis client configuration and initialization\n\n\n\n\n// Load environment variables for server-side only\nif (true) {\n    await __webpack_require__.e(/*! import() */ \"vendor-chunks/dotenv@16.5.0\").then(__webpack_require__.t.bind(__webpack_require__, /*! dotenv */ \"(ssr)/./node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js\", 23)).then((mod)=>mod.config());\n}\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_1__.StructuredLogger('redis', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_1__.prettyTransport);\nlet redisClient = null;\nlet circuitBreaker = null;\nasync function getRedisConfig() {\n    const config = {};\n    // Initialize secrets manager\n    await _secretsManager__WEBPACK_IMPORTED_MODULE_3__.secretsManager.initialize();\n    const secrets = await _secretsManager__WEBPACK_IMPORTED_MODULE_3__.secretsManager.getAllSecrets();\n    if (true) {\n        config.url = \"redis://localhost:9021\";\n    } else {}\n    // TLS Configuration\n    if (process.env.REDIS_TLS_ENABLED === 'true') {\n        config.tls = {\n            rejectUnauthorized: process.env.REDIS_TLS_REJECT_UNAUTHORIZED !== 'false'\n        };\n        // Use secrets for TLS certificates\n        if (secrets.redisTlsCa) {\n            config.tls.ca = secrets.redisTlsCa;\n        }\n        if (secrets.redisTlsCert) {\n            config.tls.cert = secrets.redisTlsCert;\n        }\n        if (secrets.redisTlsKey) {\n            config.tls.key = secrets.redisTlsKey;\n        }\n        if (process.env.REDIS_TLS_SERVERNAME) {\n            config.tls.servername = process.env.REDIS_TLS_SERVERNAME;\n        }\n    }\n    // Connection resilience settings\n    config.maxRetriesPerRequest = 3;\n    config.enableReadyCheck = true;\n    config.retryStrategy = (times)=>{\n        if (times > 3) {\n            logger.error('Redis connection failed after 3 retries');\n            return null // Stop retrying\n            ;\n        }\n        const delay = Math.min(times * 200, 2000);\n        logger.warn(`Redis connection attempt ${times}, retrying in ${delay}ms`, {\n            attempt: times,\n            delay\n        });\n        return delay;\n    };\n    return config;\n}\n// Initialize circuit breaker for Redis operations\nfunction initializeCircuitBreaker() {\n    if (!circuitBreaker) {\n        circuitBreaker = new _circuitBreaker__WEBPACK_IMPORTED_MODULE_2__.CircuitBreaker({\n            name: 'redis',\n            failureThreshold: parseInt(process.env.REDIS_CIRCUIT_FAILURE_THRESHOLD || '5', 10),\n            resetTimeout: parseInt(process.env.REDIS_CIRCUIT_RESET_TIMEOUT || '60000', 10),\n            halfOpenRequests: parseInt(process.env.REDIS_CIRCUIT_HALF_OPEN_REQUESTS || '3', 10),\n            onStateChange: (oldState, newState)=>{\n                logger.warn('Redis circuit breaker state changed', {\n                    oldState,\n                    newState\n                });\n            }\n        });\n    }\n    return circuitBreaker;\n}\nasync function getRedisClient() {\n    // Only initialize Redis on server\n    if (false) {}\n    if (redisClient && redisClient.status === 'ready') {\n        return redisClient;\n    }\n    // Initialize circuit breaker\n    const breaker = initializeCircuitBreaker();\n    try {\n        // Use circuit breaker for connection attempt\n        return await breaker.execute(async ()=>{\n            const config = await getRedisConfig();\n            logger.info('Initializing Redis connection', {\n                host: config.host,\n                port: config.port,\n                url: config.url ? 'configured' : 'not configured'\n            });\n            redisClient = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(config.url || config);\n            redisClient.on('connect', ()=>{\n                logger.info('Redis client connected');\n            });\n            redisClient.on('error', (err)=>{\n                logger.error('Redis client error', err);\n            });\n            redisClient.on('ready', ()=>{\n                logger.info('Redis client ready to accept commands');\n            });\n            redisClient.on('close', ()=>{\n                logger.warn('Redis connection closed');\n            });\n            redisClient.on('reconnecting', (delay)=>{\n                logger.info('Redis reconnecting', {\n                    delay\n                });\n            });\n            // Test the connection\n            await redisClient.ping();\n            logger.info('Redis connection established and tested');\n            return redisClient;\n        });\n    } catch (error) {\n        logger.error('Failed to initialize Redis client', error);\n        redisClient = null;\n        return null;\n    }\n}\nfunction getRedisCircuitBreaker() {\n    return circuitBreaker || initializeCircuitBreaker();\n}\nasync function closeRedisClient() {\n    if (redisClient) {\n        logger.info('Closing Redis connection');\n        await redisClient.quit();\n        redisClient = null;\n    }\n}\n// Graceful shutdown\nif (true) {\n    process.on('SIGTERM', async ()=>{\n        await closeRedisClient();\n    });\n    process.on('SIGINT', async ()=>{\n        await closeRedisClient();\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/server/services/redisClient.ts\n");

/***/ }),

/***/ "(ssr)/./src/server/services/secretsManager.ts":
/*!***********************************************!*\
  !*** ./src/server/services/secretsManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   secretsManager: () => (/* binding */ secretsManager)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(ssr)/./src/lib/cache/observability/index.ts\");\n// Secrets Manager for Redis and other sensitive credentials\n// Supports multiple secret sources: environment variables, files, and external services\n\n\n\n\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_3__.StructuredLogger('secrets-manager', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_3__.prettyTransport);\nclass SecretsManager {\n    constructor(){\n        this.cache = new Map();\n        this.secretsPath = process.env.SECRETS_PATH || path__WEBPACK_IMPORTED_MODULE_1__.join(process.cwd(), '.secrets');\n        // Initialize encryption key from environment or generate one\n        if (process.env.SECRETS_ENCRYPTION_KEY) {\n            this.encryptionKey = Buffer.from(process.env.SECRETS_ENCRYPTION_KEY, 'hex');\n        }\n    }\n    async initialize() {\n        // Create secrets directory if it doesn't exist\n        try {\n            await fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdir(this.secretsPath, {\n                recursive: true,\n                mode: 448\n            });\n        } catch (error) {\n            logger.error('Failed to create secrets directory', error);\n        }\n    }\n    // Get secret from various sources\n    async getSecret(name, config) {\n        const cacheKey = `${config.source}:${name}`;\n        // Check cache first\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        let secret;\n        switch(config.source){\n            case 'env':\n                secret = process.env[config.key || name];\n                break;\n            case 'file':\n                secret = await this.readSecretFromFile(config.path || name);\n                break;\n            case 'vault':\n                secret = await this.readFromHashicorpVault(name, config);\n                break;\n            case 'aws-secrets-manager':\n                secret = await this.readFromAWSSecretsManager(name, config);\n                break;\n            case 'gcp-secret-manager':\n                secret = await this.readFromGCPSecretManager(name, config);\n                break;\n        }\n        // Decrypt if needed\n        if (secret && config.decrypt && this.encryptionKey) {\n            secret = this.decrypt(secret);\n        }\n        // Cache the secret\n        if (secret) {\n            this.cache.set(cacheKey, secret);\n        }\n        return secret;\n    }\n    // Read secret from file\n    async readSecretFromFile(filename) {\n        try {\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1__.isAbsolute(filename) ? filename : path__WEBPACK_IMPORTED_MODULE_1__.join(this.secretsPath, filename);\n            const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile(filePath, 'utf8');\n            return content.trim();\n        } catch (error) {\n            if (error.code !== 'ENOENT') {\n                logger.error(`Failed to read secret from file: ${filename}`, error);\n            }\n            return undefined;\n        }\n    }\n    // Placeholder for HashiCorp Vault integration\n    async readFromHashicorpVault(name, config) {\n        // Implementation would require vault client library\n        logger.warn('HashiCorp Vault integration not implemented', {\n            name\n        });\n        return undefined;\n    }\n    // Placeholder for AWS Secrets Manager integration\n    async readFromAWSSecretsManager(name, config) {\n        // Implementation would require AWS SDK\n        logger.warn('AWS Secrets Manager integration not implemented', {\n            name\n        });\n        return undefined;\n    }\n    // Placeholder for GCP Secret Manager integration\n    async readFromGCPSecretManager(name, config) {\n        // Implementation would require GCP client library\n        logger.warn('GCP Secret Manager integration not implemented', {\n            name\n        });\n        return undefined;\n    }\n    // Get all secrets with fallback to environment variables\n    async getAllSecrets() {\n        const secrets = {};\n        // Redis credentials\n        secrets.redisPassword = await this.getSecret('REDIS_PASSWORD', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'REDIS_PASSWORD'\n        }) || process.env.REDIS_PASSWORD;\n        secrets.redisUsername = await this.getSecret('REDIS_USERNAME', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'REDIS_USERNAME'\n        }) || process.env.REDIS_USERNAME || 'airport-app';\n        // TLS certificates\n        if (process.env.REDIS_TLS_ENABLED === 'true') {\n            secrets.redisTlsCa = await this.getSecret('REDIS_TLS_CA', {\n                source: 'file',\n                path: process.env.REDIS_TLS_CA || 'redis/tls/ca.crt'\n            });\n            secrets.redisTlsCert = await this.getSecret('REDIS_TLS_CERT', {\n                source: 'file',\n                path: process.env.REDIS_TLS_CERT || 'redis/tls/client.crt'\n            });\n            secrets.redisTlsKey = await this.getSecret('REDIS_TLS_KEY', {\n                source: 'file',\n                path: process.env.REDIS_TLS_KEY || 'redis/tls/client.key'\n            });\n        }\n        // API keys\n        secrets.apiNinjasKey = await this.getSecret('VITE_API_NINJAS_API_KEY', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'VITE_API_NINJAS_API_KEY'\n        });\n        secrets.openSkyUsername = await this.getSecret('VITE_OPENSKY_USERNAME', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'VITE_OPENSKY_USERNAME'\n        });\n        secrets.openSkyPassword = await this.getSecret('VITE_OPENSKY_PASSWORD', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'VITE_OPENSKY_PASSWORD'\n        });\n        return secrets;\n    }\n    // Generate secure random password\n    generatePassword(length = 32) {\n        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=';\n        const randomBytes = crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(length);\n        let password = '';\n        for(let i = 0; i < length; i++){\n            password += charset[randomBytes[i] % charset.length];\n        }\n        return password;\n    }\n    // Save secret to file (for development/setup)\n    async saveSecret(name, value, encrypt = false) {\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1__.join(this.secretsPath, name);\n        let content = value;\n        if (encrypt && this.encryptionKey) {\n            content = this.encrypt(value);\n        }\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile(filePath, content, {\n            mode: 384\n        });\n        logger.info(`Secret saved: ${name}`);\n    }\n    // Simple encryption for at-rest protection\n    encrypt(text) {\n        if (!this.encryptionKey) {\n            throw new Error('Encryption key not configured');\n        }\n        const iv = crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(16);\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_2__.createCipheriv('aes-256-gcm', this.encryptionKey, iv);\n        let encrypted = cipher.update(text, 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n        const authTag = cipher.getAuthTag();\n        return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;\n    }\n    // Decrypt encrypted secrets\n    decrypt(encryptedText) {\n        if (!this.encryptionKey) {\n            throw new Error('Encryption key not configured');\n        }\n        const parts = encryptedText.split(':');\n        if (parts.length !== 3) {\n            throw new Error('Invalid encrypted format');\n        }\n        const iv = Buffer.from(parts[0], 'hex');\n        const authTag = Buffer.from(parts[1], 'hex');\n        const encrypted = parts[2];\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_2__.createDecipheriv('aes-256-gcm', this.encryptionKey, iv);\n        decipher.setAuthTag(authTag);\n        let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n        decrypted += decipher.final('utf8');\n        return decrypted;\n    }\n    // Clear cached secrets\n    clearCache() {\n        this.cache.clear();\n        logger.info('Secrets cache cleared');\n    }\n    // Rotate encryption key\n    async rotateEncryptionKey(newKey) {\n        const oldKey = this.encryptionKey;\n        this.encryptionKey = newKey;\n        // Re-encrypt all file-based secrets\n        const files = await fs_promises__WEBPACK_IMPORTED_MODULE_0__.readdir(this.secretsPath);\n        for (const file of files){\n            if (file.startsWith('.')) continue;\n            try {\n                const filePath = path__WEBPACK_IMPORTED_MODULE_1__.join(this.secretsPath, file);\n                const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile(filePath, 'utf8');\n                // Try to decrypt with old key\n                if (oldKey) {\n                    this.encryptionKey = oldKey;\n                    const decrypted = this.decrypt(content);\n                    // Re-encrypt with new key\n                    this.encryptionKey = newKey;\n                    const encrypted = this.encrypt(decrypted);\n                    await fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile(filePath, encrypted, {\n                        mode: 384\n                    });\n                }\n            } catch (error) {\n                logger.error(`Failed to rotate key for ${file}`, error);\n            }\n        }\n        logger.info('Encryption key rotated successfully');\n    }\n}\n// Export singleton instance\nconst secretsManager = new SecretsManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/server/services/secretsManager.ts\n");

/***/ })

};
;