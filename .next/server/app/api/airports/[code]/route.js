/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/airports/[code]/route";
exports.ids = ["app/api/airports/[code]/route"];
exports.modules = {

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("ioredis");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&page=%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fairports%2F%5Bcode%5D%2Froute.ts&appDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&page=%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fairports%2F%5Bcode%5D%2Froute.ts&appDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_rubeen_dev_personal_airport_db_app_api_airports_code_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/airports/[code]/route.ts */ \"(rsc)/./app/api/airports/[code]/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_rubeen_dev_personal_airport_db_app_api_airports_code_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_rubeen_dev_personal_airport_db_app_api_airports_code_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/airports/[code]/route\",\n        pathname: \"/api/airports/[code]\",\n        filename: \"route\",\n        bundlePath: \"app/api/airports/[code]/route\"\n    },\n    resolvedPagePath: \"/Users/rubeen/dev/personal/airport-db/app/api/airports/[code]/route.ts\",\n    nextConfigOutput,\n    userland: _Users_rubeen_dev_personal_airport_db_app_api_airports_code_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS4xLjVfQGJhYmVsK2NvcmVANy4yNy40X3JlYWN0LWRvbUAxOS4xLjBfcmVhY3RAMTkuMS4wX19yZWFjdEAxOS4xLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyL2luZGV4LmpzP25hbWU9YXBwJTJGYXBpJTJGYWlycG9ydHMlMkYlNUJjb2RlJTVEJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhaXJwb3J0cyUyRiU1QmNvZGUlNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhaXJwb3J0cyUyRiU1QmNvZGUlNUQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZydWJlZW4lMkZkZXYlMkZwZXJzb25hbCUyRmFpcnBvcnQtZGIlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcnViZWVuJTJGZGV2JTJGcGVyc29uYWwlMkZhaXJwb3J0LWRiJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNzQjtBQUNuRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3J1YmVlbi9kZXYvcGVyc29uYWwvYWlycG9ydC1kYi9hcHAvYXBpL2FpcnBvcnRzL1tjb2RlXS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWlycG9ydHMvW2NvZGVdL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWlycG9ydHMvW2NvZGVdXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9haXJwb3J0cy9bY29kZV0vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvcnViZWVuL2Rldi9wZXJzb25hbC9haXJwb3J0LWRiL2FwcC9hcGkvYWlycG9ydHMvW2NvZGVdL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&page=%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fairports%2F%5Bcode%5D%2Froute.ts&appDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \****************************************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \****************************************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./app/api/airports/[code]/route.ts":
/*!******************************************!*\
  !*** ./app/api/airports/[code]/route.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/server/services/airportCache */ \"(rsc)/./src/server/services/airportCache.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__]);\n_src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst API_NINJAS_URL = 'https://api.api-ninjas.com/v1';\nconst API_NINJAS_KEY = process.env.API_NINJAS_KEY || 'yCht2E3WowDAz3v2Hn28BQ==7hYVDsQwPCIwiGBN';\n// Helper function to call API Ninjas\nasync function fetchFromApiNinjas(iata, icao) {\n    if (!API_NINJAS_KEY) {\n        throw new Error('API Ninjas API key is not configured');\n    }\n    const apiUrl = new URL(`${API_NINJAS_URL}/airports`);\n    if (iata) apiUrl.searchParams.append('iata', iata);\n    if (icao) apiUrl.searchParams.append('icao', icao);\n    console.log('Calling API Ninjas:', apiUrl.toString());\n    const response = await fetch(apiUrl.toString(), {\n        headers: {\n            'X-Api-Key': API_NINJAS_KEY\n        }\n    });\n    console.log('API Ninjas response:', response.status, response.statusText);\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Ninjas error response:', errorText);\n        throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('API Ninjas data:', data);\n    return data;\n}\nasync function GET(request, { params }) {\n    try {\n        // Initialize airport cache if not already done\n        await _src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__.airportCache.initialize();\n        const { code: pathCode } = params;\n        if (!pathCode) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Airport code is required'\n            }, {\n                status: 400\n            });\n        }\n        const upperCode = pathCode.toUpperCase();\n        // Validate code format (3 or 4 letters)\n        if (!/^[A-Z]{3,4}$/.test(upperCode)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Airport code must be 3 or 4 letters'\n            }, {\n                status: 400\n            });\n        }\n        console.log('=== AIRPORT BY CODE ENDPOINT ===');\n        console.log('Airport code request:', {\n            pathCode: upperCode\n        });\n        // Determine if it's IATA (3 chars) or ICAO (4 chars)\n        const iata = upperCode.length === 3 ? upperCode : null;\n        const icao = upperCode.length === 4 ? upperCode : null;\n        let airport = null;\n        let cached = false;\n        // Try cache first\n        const cachedResult = await _src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__.airportCache.get(upperCode);\n        if (cachedResult) {\n            airport = cachedResult.data;\n            cached = true;\n        } else {\n            // Call external API\n            const airports = await fetchFromApiNinjas(iata, icao);\n            airport = airports[0] || null;\n            // Cache the result\n            if (airport) {\n                if (airport.iata) await _src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__.airportCache.set(airport.iata, airport);\n                if (airport.icao) await _src_server_services_airportCache__WEBPACK_IMPORTED_MODULE_1__.airportCache.set(airport.icao, airport);\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            airport,\n            source: cached ? 'cache' : 'api',\n            cached\n        });\n    } catch (error) {\n        console.error('Error in airport by code API:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FpcnBvcnRzL1tjb2RlXS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBdUQ7QUFDb0I7QUFHM0UsTUFBTUUsaUJBQWlCO0FBQ3ZCLE1BQU1DLGlCQUFpQkMsUUFBUUMsR0FBRyxDQUFDRixjQUFjLElBQUk7QUFFckQscUNBQXFDO0FBQ3JDLGVBQWVHLG1CQUFtQkMsSUFBb0IsRUFBRUMsSUFBb0I7SUFDMUUsSUFBSSxDQUFDTCxnQkFBZ0I7UUFDbkIsTUFBTSxJQUFJTSxNQUFNO0lBQ2xCO0lBRUEsTUFBTUMsU0FBUyxJQUFJQyxJQUFJLEdBQUdULGVBQWUsU0FBUyxDQUFDO0lBQ25ELElBQUlLLE1BQU1HLE9BQU9FLFlBQVksQ0FBQ0MsTUFBTSxDQUFDLFFBQVFOO0lBQzdDLElBQUlDLE1BQU1FLE9BQU9FLFlBQVksQ0FBQ0MsTUFBTSxDQUFDLFFBQVFMO0lBRTdDTSxRQUFRQyxHQUFHLENBQUMsdUJBQXVCTCxPQUFPTSxRQUFRO0lBRWxELE1BQU1DLFdBQVcsTUFBTUMsTUFBTVIsT0FBT00sUUFBUSxJQUFJO1FBQzlDRyxTQUFTO1lBQ1AsYUFBYWhCO1FBQ2Y7SUFDRjtJQUVBVyxRQUFRQyxHQUFHLENBQUMsd0JBQXdCRSxTQUFTRyxNQUFNLEVBQUVILFNBQVNJLFVBQVU7SUFFeEUsSUFBSSxDQUFDSixTQUFTSyxFQUFFLEVBQUU7UUFDaEIsTUFBTUMsWUFBWSxNQUFNTixTQUFTTyxJQUFJO1FBQ3JDVixRQUFRVyxLQUFLLENBQUMsOEJBQThCRjtRQUM1QyxNQUFNLElBQUlkLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRVEsU0FBU0csTUFBTSxDQUFDLENBQUMsRUFBRUgsU0FBU0ksVUFBVSxFQUFFO0lBQ2pGO0lBRUEsTUFBTUssT0FBTyxNQUFNVCxTQUFTVSxJQUFJO0lBQ2hDYixRQUFRQyxHQUFHLENBQUMsb0JBQW9CVztJQUNoQyxPQUFPQTtBQUNUO0FBRU8sZUFBZUUsSUFDcEJDLE9BQW9CLEVBQ3BCLEVBQUVDLE1BQU0sRUFBZ0M7SUFFeEMsSUFBSTtRQUNGLCtDQUErQztRQUMvQyxNQUFNN0IsMkVBQVlBLENBQUM4QixVQUFVO1FBRTdCLE1BQU0sRUFBRUMsTUFBTUMsUUFBUSxFQUFFLEdBQUdIO1FBRTNCLElBQUksQ0FBQ0csVUFBVTtZQUNiLE9BQU9qQyxxREFBWUEsQ0FBQzJCLElBQUksQ0FDdEI7Z0JBQUVGLE9BQU87WUFBMkIsR0FDcEM7Z0JBQUVMLFFBQVE7WUFBSTtRQUVsQjtRQUVBLE1BQU1jLFlBQVlELFNBQVNFLFdBQVc7UUFFdEMsd0NBQXdDO1FBQ3hDLElBQUksQ0FBQyxlQUFlQyxJQUFJLENBQUNGLFlBQVk7WUFDbkMsT0FBT2xDLHFEQUFZQSxDQUFDMkIsSUFBSSxDQUN0QjtnQkFBRUYsT0FBTztZQUFzQyxHQUMvQztnQkFBRUwsUUFBUTtZQUFJO1FBRWxCO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztRQUNaRCxRQUFRQyxHQUFHLENBQUMseUJBQXlCO1lBQUVrQixVQUFVQztRQUFVO1FBRTNELHFEQUFxRDtRQUNyRCxNQUFNM0IsT0FBTzJCLFVBQVVHLE1BQU0sS0FBSyxJQUFJSCxZQUFZO1FBQ2xELE1BQU0xQixPQUFPMEIsVUFBVUcsTUFBTSxLQUFLLElBQUlILFlBQVk7UUFFbEQsSUFBSUksVUFBVTtRQUNkLElBQUlDLFNBQVM7UUFFYixrQkFBa0I7UUFDbEIsTUFBTUMsZUFBZSxNQUFNdkMsMkVBQVlBLENBQUN3QyxHQUFHLENBQUNQO1FBQzVDLElBQUlNLGNBQWM7WUFDaEJGLFVBQVVFLGFBQWFkLElBQUk7WUFDM0JhLFNBQVM7UUFDWCxPQUFPO1lBQ0wsb0JBQW9CO1lBQ3BCLE1BQU1HLFdBQVcsTUFBTXBDLG1CQUFtQkMsTUFBTUM7WUFDaEQ4QixVQUFVSSxRQUFRLENBQUMsRUFBRSxJQUFJO1lBRXpCLG1CQUFtQjtZQUNuQixJQUFJSixTQUFTO2dCQUNYLElBQUlBLFFBQVEvQixJQUFJLEVBQUUsTUFBTU4sMkVBQVlBLENBQUMwQyxHQUFHLENBQUNMLFFBQVEvQixJQUFJLEVBQUUrQjtnQkFDdkQsSUFBSUEsUUFBUTlCLElBQUksRUFBRSxNQUFNUCwyRUFBWUEsQ0FBQzBDLEdBQUcsQ0FBQ0wsUUFBUTlCLElBQUksRUFBRThCO1lBQ3pEO1FBQ0Y7UUFFQSxPQUFPdEMscURBQVlBLENBQUMyQixJQUFJLENBQUM7WUFDdkJXO1lBQ0FNLFFBQVFMLFNBQVMsVUFBVTtZQUMzQkE7UUFDRjtJQUVGLEVBQUUsT0FBT2QsT0FBTztRQUNkWCxRQUFRVyxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPekIscURBQVlBLENBQUMyQixJQUFJLENBQ3RCO1lBQUVGLE9BQU87UUFBd0IsR0FDakM7WUFBRUwsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ydWJlZW4vZGV2L3BlcnNvbmFsL2FpcnBvcnQtZGIvYXBwL2FwaS9haXJwb3J0cy9bY29kZV0vcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgYWlycG9ydENhY2hlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9zZXJ2aWNlcy9haXJwb3J0Q2FjaGUnXG5pbXBvcnQgdHlwZSB7IEFpcnBvcnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvdHlwZXMvYWlycG9ydCdcblxuY29uc3QgQVBJX05JTkpBU19VUkwgPSAnaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEnXG5jb25zdCBBUElfTklOSkFTX0tFWSA9IHByb2Nlc3MuZW52LkFQSV9OSU5KQVNfS0VZIHx8ICd5Q2h0MkUzV293REF6M3YySG4yOEJRPT03aFlWRHNRd1BDSXdpR0JOJ1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsbCBBUEkgTmluamFzXG5hc3luYyBmdW5jdGlvbiBmZXRjaEZyb21BcGlOaW5qYXMoaWF0YT86IHN0cmluZyB8IG51bGwsIGljYW8/OiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTxBaXJwb3J0W10+IHtcbiAgaWYgKCFBUElfTklOSkFTX0tFWSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQVBJIE5pbmphcyBBUEkga2V5IGlzIG5vdCBjb25maWd1cmVkJylcbiAgfVxuXG4gIGNvbnN0IGFwaVVybCA9IG5ldyBVUkwoYCR7QVBJX05JTkpBU19VUkx9L2FpcnBvcnRzYClcbiAgaWYgKGlhdGEpIGFwaVVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdpYXRhJywgaWF0YSlcbiAgaWYgKGljYW8pIGFwaVVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdpY2FvJywgaWNhbylcblxuICBjb25zb2xlLmxvZygnQ2FsbGluZyBBUEkgTmluamFzOicsIGFwaVVybC50b1N0cmluZygpKVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsLnRvU3RyaW5nKCksIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnWC1BcGktS2V5JzogQVBJX05JTkpBU19LRVksXG4gICAgfSxcbiAgfSlcblxuICBjb25zb2xlLmxvZygnQVBJIE5pbmphcyByZXNwb25zZTonLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpXG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKVxuICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBOaW5qYXMgZXJyb3IgcmVzcG9uc2U6JywgZXJyb3JUZXh0KVxuICAgIHRocm93IG5ldyBFcnJvcihgQVBJIHJlcXVlc3QgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gIH1cblxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gIGNvbnNvbGUubG9nKCdBUEkgTmluamFzIGRhdGE6JywgZGF0YSlcbiAgcmV0dXJuIGRhdGFcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChcbiAgcmVxdWVzdDogTmV4dFJlcXVlc3QsXG4gIHsgcGFyYW1zIH06IHsgcGFyYW1zOiB7IGNvZGU6IHN0cmluZyB9IH1cbikge1xuICB0cnkge1xuICAgIC8vIEluaXRpYWxpemUgYWlycG9ydCBjYWNoZSBpZiBub3QgYWxyZWFkeSBkb25lXG4gICAgYXdhaXQgYWlycG9ydENhY2hlLmluaXRpYWxpemUoKVxuXG4gICAgY29uc3QgeyBjb2RlOiBwYXRoQ29kZSB9ID0gcGFyYW1zXG4gICAgXG4gICAgaWYgKCFwYXRoQ29kZSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnQWlycG9ydCBjb2RlIGlzIHJlcXVpcmVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCB1cHBlckNvZGUgPSBwYXRoQ29kZS50b1VwcGVyQ2FzZSgpXG4gICAgXG4gICAgLy8gVmFsaWRhdGUgY29kZSBmb3JtYXQgKDMgb3IgNCBsZXR0ZXJzKVxuICAgIGlmICghL15bQS1aXXszLDR9JC8udGVzdCh1cHBlckNvZGUpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdBaXJwb3J0IGNvZGUgbXVzdCBiZSAzIG9yIDQgbGV0dGVycycgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKCc9PT0gQUlSUE9SVCBCWSBDT0RFIEVORFBPSU5UID09PScpXG4gICAgY29uc29sZS5sb2coJ0FpcnBvcnQgY29kZSByZXF1ZXN0OicsIHsgcGF0aENvZGU6IHVwcGVyQ29kZSB9KVxuICAgIFxuICAgIC8vIERldGVybWluZSBpZiBpdCdzIElBVEEgKDMgY2hhcnMpIG9yIElDQU8gKDQgY2hhcnMpXG4gICAgY29uc3QgaWF0YSA9IHVwcGVyQ29kZS5sZW5ndGggPT09IDMgPyB1cHBlckNvZGUgOiBudWxsXG4gICAgY29uc3QgaWNhbyA9IHVwcGVyQ29kZS5sZW5ndGggPT09IDQgPyB1cHBlckNvZGUgOiBudWxsXG4gICAgXG4gICAgbGV0IGFpcnBvcnQgPSBudWxsXG4gICAgbGV0IGNhY2hlZCA9IGZhbHNlXG4gICAgXG4gICAgLy8gVHJ5IGNhY2hlIGZpcnN0XG4gICAgY29uc3QgY2FjaGVkUmVzdWx0ID0gYXdhaXQgYWlycG9ydENhY2hlLmdldCh1cHBlckNvZGUpXG4gICAgaWYgKGNhY2hlZFJlc3VsdCkge1xuICAgICAgYWlycG9ydCA9IGNhY2hlZFJlc3VsdC5kYXRhXG4gICAgICBjYWNoZWQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhbGwgZXh0ZXJuYWwgQVBJXG4gICAgICBjb25zdCBhaXJwb3J0cyA9IGF3YWl0IGZldGNoRnJvbUFwaU5pbmphcyhpYXRhLCBpY2FvKVxuICAgICAgYWlycG9ydCA9IGFpcnBvcnRzWzBdIHx8IG51bGxcbiAgICAgIFxuICAgICAgLy8gQ2FjaGUgdGhlIHJlc3VsdFxuICAgICAgaWYgKGFpcnBvcnQpIHtcbiAgICAgICAgaWYgKGFpcnBvcnQuaWF0YSkgYXdhaXQgYWlycG9ydENhY2hlLnNldChhaXJwb3J0LmlhdGEsIGFpcnBvcnQpXG4gICAgICAgIGlmIChhaXJwb3J0LmljYW8pIGF3YWl0IGFpcnBvcnRDYWNoZS5zZXQoYWlycG9ydC5pY2FvLCBhaXJwb3J0KVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgYWlycG9ydCxcbiAgICAgIHNvdXJjZTogY2FjaGVkID8gJ2NhY2hlJyA6ICdhcGknLFxuICAgICAgY2FjaGVkXG4gICAgfSlcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBhaXJwb3J0IGJ5IGNvZGUgQVBJOicsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApXG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiYWlycG9ydENhY2hlIiwiQVBJX05JTkpBU19VUkwiLCJBUElfTklOSkFTX0tFWSIsInByb2Nlc3MiLCJlbnYiLCJmZXRjaEZyb21BcGlOaW5qYXMiLCJpYXRhIiwiaWNhbyIsIkVycm9yIiwiYXBpVXJsIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwiY29uc29sZSIsImxvZyIsInRvU3RyaW5nIiwicmVzcG9uc2UiLCJmZXRjaCIsImhlYWRlcnMiLCJzdGF0dXMiLCJzdGF0dXNUZXh0Iiwib2siLCJlcnJvclRleHQiLCJ0ZXh0IiwiZXJyb3IiLCJkYXRhIiwianNvbiIsIkdFVCIsInJlcXVlc3QiLCJwYXJhbXMiLCJpbml0aWFsaXplIiwiY29kZSIsInBhdGhDb2RlIiwidXBwZXJDb2RlIiwidG9VcHBlckNhc2UiLCJ0ZXN0IiwibGVuZ3RoIiwiYWlycG9ydCIsImNhY2hlZCIsImNhY2hlZFJlc3VsdCIsImdldCIsImFpcnBvcnRzIiwic2V0Iiwic291cmNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/airports/[code]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache/observability/index.ts":
/*!**********************************************!*\
  !*** ./src/lib/cache/observability/index.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheLogger: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.CacheLogger),\n/* harmony export */   CacheMetricsCollector: () => (/* reexport safe */ _metrics__WEBPACK_IMPORTED_MODULE_0__.CacheMetricsCollector),\n/* harmony export */   SimpleLatencyTracker: () => (/* reexport safe */ _metrics__WEBPACK_IMPORTED_MODULE_0__.SimpleLatencyTracker),\n/* harmony export */   StructuredLogger: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.StructuredLogger),\n/* harmony export */   formatMetricsForPrometheus: () => (/* reexport safe */ _metrics__WEBPACK_IMPORTED_MODULE_0__.formatMetricsForPrometheus),\n/* harmony export */   generateCorrelationId: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.generateCorrelationId),\n/* harmony export */   jsonTransport: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.jsonTransport),\n/* harmony export */   prettyTransport: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.prettyTransport)\n/* harmony export */ });\n/* harmony import */ var _metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metrics */ \"(rsc)/./src/lib/cache/observability/metrics.ts\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ \"(rsc)/./src/lib/cache/observability/logger.ts\");\n// Cache observability exports\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2NhY2hlL29ic2VydmFiaWxpdHkvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDhCQUE4QjtBQUNMO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ydWJlZW4vZGV2L3BlcnNvbmFsL2FpcnBvcnQtZGIvc3JjL2xpYi9jYWNoZS9vYnNlcnZhYmlsaXR5L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENhY2hlIG9ic2VydmFiaWxpdHkgZXhwb3J0c1xuZXhwb3J0ICogZnJvbSAnLi9tZXRyaWNzJ1xuZXhwb3J0ICogZnJvbSAnLi9sb2dnZXInIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache/observability/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache/observability/logger.ts":
/*!***********************************************!*\
  !*** ./src/lib/cache/observability/logger.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheLogger: () => (/* binding */ CacheLogger),\n/* harmony export */   StructuredLogger: () => (/* binding */ StructuredLogger),\n/* harmony export */   generateCorrelationId: () => (/* binding */ generateCorrelationId),\n/* harmony export */   jsonTransport: () => (/* binding */ jsonTransport),\n/* harmony export */   prettyTransport: () => (/* binding */ prettyTransport)\n/* harmony export */ });\n// Structured logging for cache operations\n// Provides consistent, queryable logs with correlation IDs\nclass StructuredLogger {\n    constructor(module, context = {}, transport){\n        this.module = module;\n        this.context = context;\n        this.transport = transport || this.defaultTransport;\n    }\n    debug(message, metadata) {\n        this.log('debug', message, metadata);\n    }\n    info(message, metadata) {\n        this.log('info', message, metadata);\n    }\n    warn(message, metadata) {\n        this.log('warn', message, metadata);\n    }\n    error(message, error, metadata) {\n        const errorInfo = error ? {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        } : undefined;\n        this.log('error', message, metadata, errorInfo);\n    }\n    child(context) {\n        return new StructuredLogger(this.module, {\n            ...this.context,\n            ...context\n        }, this.transport);\n    }\n    log(level, message, metadata, error) {\n        const entry = {\n            timestamp: new Date().toISOString(),\n            level,\n            message,\n            module: this.module,\n            context: this.context,\n            metadata,\n            error\n        };\n        this.transport(entry);\n    }\n    defaultTransport(entry) {\n        const { level, message, ...rest } = entry;\n        // Format for console output\n        const prefix = `[${entry.timestamp}] [${entry.module}] ${level.toUpperCase()}`;\n        const contextStr = entry.context?.correlationId ? ` [${entry.context.correlationId}]` : '';\n        switch(level){\n            case 'debug':\n                console.debug(`${prefix}${contextStr}:`, message, rest);\n                break;\n            case 'info':\n                console.info(`${prefix}${contextStr}:`, message, rest);\n                break;\n            case 'warn':\n                console.warn(`${prefix}${contextStr}:`, message, rest);\n                break;\n            case 'error':\n                console.error(`${prefix}${contextStr}:`, message, rest);\n                break;\n        }\n    }\n}\n// Cache-specific logger with operation tracking\nclass CacheLogger extends StructuredLogger {\n    constructor(context = {}, transport){\n        super('cache', context, transport);\n    }\n    logOperation(operation, key, duration, success, metadata) {\n        const level = success ? 'debug' : 'warn';\n        const message = `Cache ${operation} for key: ${key}`;\n        this.log(level, message, {\n            ...metadata,\n            operation,\n            key,\n            duration,\n            success\n        });\n    }\n    logCacheHit(key, metadata) {\n        this.debug('Cache hit', {\n            ...metadata,\n            operation: 'get',\n            key,\n            result: 'hit'\n        });\n    }\n    logCacheMiss(key, metadata) {\n        this.debug('Cache miss', {\n            ...metadata,\n            operation: 'get',\n            key,\n            result: 'miss'\n        });\n    }\n    logCacheSet(key, ttl, size, metadata) {\n        this.debug('Cache set', {\n            ...metadata,\n            operation: 'set',\n            key,\n            ttl,\n            size\n        });\n    }\n    logCacheError(operation, key, error, metadata) {\n        this.error(`Cache ${operation} failed for key: ${key}`, error, {\n            ...metadata,\n            operation,\n            key\n        });\n    }\n    log(level, message, metadata, error) {\n        // Override to add operation tracking\n        const entry = {\n            timestamp: new Date().toISOString(),\n            level,\n            message,\n            module: 'cache',\n            operation: metadata?.operation,\n            duration: metadata?.duration,\n            context: this.context,\n            metadata,\n            error\n        };\n        this.transport(entry);\n    }\n}\n// JSON formatter for production logging\nfunction jsonTransport(entry) {\n    console.log(JSON.stringify(entry));\n}\n// Pretty formatter for development\nfunction prettyTransport(entry) {\n    const { level, message, module, operation, duration, context, metadata, error } = entry;\n    const parts = [\n        `[${entry.timestamp}]`,\n        `[${module}]`,\n        level.toUpperCase().padEnd(5)\n    ];\n    if (context?.correlationId) {\n        parts.push(`[${context.correlationId.substring(0, 8)}]`);\n    }\n    if (operation) {\n        parts.push(`[${operation}]`);\n    }\n    parts.push(message);\n    if (duration !== undefined) {\n        parts.push(`(${duration}ms)`);\n    }\n    const logMessage = parts.join(' ');\n    // Log based on level\n    switch(level){\n        case 'debug':\n            console.debug(logMessage, metadata || '');\n            break;\n        case 'info':\n            console.info(logMessage, metadata || '');\n            break;\n        case 'warn':\n            console.warn(logMessage, metadata || '');\n            if (error) console.warn(error);\n            break;\n        case 'error':\n            console.error(logMessage, metadata || '');\n            if (error) console.error(error);\n            break;\n    }\n}\n// Helper to generate correlation IDs\nfunction generateCorrelationId() {\n    return `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2NhY2hlL29ic2VydmFiaWxpdHkvbG9nZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLDJEQUEyRDtBQW9DcEQsTUFBTUE7SUFLWEMsWUFDRUMsTUFBYyxFQUNkQyxVQUFzQixDQUFDLENBQUMsRUFDeEJDLFNBQXFDLENBQ3JDO1FBQ0EsSUFBSSxDQUFDRixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLGFBQWEsSUFBSSxDQUFDQyxnQkFBZ0I7SUFDckQ7SUFFQUMsTUFBTUMsT0FBZSxFQUFFQyxRQUE4QixFQUFRO1FBQzNELElBQUksQ0FBQ0MsR0FBRyxDQUFDLFNBQVNGLFNBQVNDO0lBQzdCO0lBRUFFLEtBQUtILE9BQWUsRUFBRUMsUUFBOEIsRUFBUTtRQUMxRCxJQUFJLENBQUNDLEdBQUcsQ0FBQyxRQUFRRixTQUFTQztJQUM1QjtJQUVBRyxLQUFLSixPQUFlLEVBQUVDLFFBQThCLEVBQVE7UUFDMUQsSUFBSSxDQUFDQyxHQUFHLENBQUMsUUFBUUYsU0FBU0M7SUFDNUI7SUFFQUksTUFBTUwsT0FBZSxFQUFFSyxLQUFhLEVBQUVKLFFBQThCLEVBQVE7UUFDMUUsTUFBTUssWUFBWUQsUUFBUTtZQUN4QkUsTUFBTUYsTUFBTUUsSUFBSTtZQUNoQlAsU0FBU0ssTUFBTUwsT0FBTztZQUN0QlEsT0FBT0gsTUFBTUcsS0FBSztRQUNwQixJQUFJQztRQUVKLElBQUksQ0FBQ1AsR0FBRyxDQUFDLFNBQVNGLFNBQVNDLFVBQVVLO0lBQ3ZDO0lBRUFJLE1BQU1kLE9BQW1CLEVBQVU7UUFDakMsT0FBTyxJQUFJSCxpQkFDVCxJQUFJLENBQUNFLE1BQU0sRUFDWDtZQUFFLEdBQUcsSUFBSSxDQUFDQyxPQUFPO1lBQUUsR0FBR0EsT0FBTztRQUFDLEdBQzlCLElBQUksQ0FBQ0MsU0FBUztJQUVsQjtJQUVRSyxJQUNOUyxLQUFlLEVBQ2ZYLE9BQWUsRUFDZkMsUUFBOEIsRUFDOUJJLEtBQXlCLEVBQ25CO1FBQ04sTUFBTU8sUUFBa0I7WUFDdEJDLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztZQUNqQ0o7WUFDQVg7WUFDQUwsUUFBUSxJQUFJLENBQUNBLE1BQU07WUFDbkJDLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCSztZQUNBSTtRQUNGO1FBRUEsSUFBSSxDQUFDUixTQUFTLENBQUNlO0lBQ2pCO0lBRVFkLGlCQUFpQmMsS0FBZSxFQUFRO1FBQzlDLE1BQU0sRUFBRUQsS0FBSyxFQUFFWCxPQUFPLEVBQUUsR0FBR2dCLE1BQU0sR0FBR0o7UUFFcEMsNEJBQTRCO1FBQzVCLE1BQU1LLFNBQVMsQ0FBQyxDQUFDLEVBQUVMLE1BQU1DLFNBQVMsQ0FBQyxHQUFHLEVBQUVELE1BQU1qQixNQUFNLENBQUMsRUFBRSxFQUFFZ0IsTUFBTU8sV0FBVyxJQUFJO1FBQzlFLE1BQU1DLGFBQWFQLE1BQU1oQixPQUFPLEVBQUV3QixnQkFDOUIsQ0FBQyxFQUFFLEVBQUVSLE1BQU1oQixPQUFPLENBQUN3QixhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQ25DO1FBRUosT0FBUVQ7WUFDTixLQUFLO2dCQUNIVSxRQUFRdEIsS0FBSyxDQUFDLEdBQUdrQixTQUFTRSxXQUFXLENBQUMsQ0FBQyxFQUFFbkIsU0FBU2dCO2dCQUNsRDtZQUNGLEtBQUs7Z0JBQ0hLLFFBQVFsQixJQUFJLENBQUMsR0FBR2MsU0FBU0UsV0FBVyxDQUFDLENBQUMsRUFBRW5CLFNBQVNnQjtnQkFDakQ7WUFDRixLQUFLO2dCQUNISyxRQUFRakIsSUFBSSxDQUFDLEdBQUdhLFNBQVNFLFdBQVcsQ0FBQyxDQUFDLEVBQUVuQixTQUFTZ0I7Z0JBQ2pEO1lBQ0YsS0FBSztnQkFDSEssUUFBUWhCLEtBQUssQ0FBQyxHQUFHWSxTQUFTRSxXQUFXLENBQUMsQ0FBQyxFQUFFbkIsU0FBU2dCO2dCQUNsRDtRQUNKO0lBQ0Y7QUFDRjtBQUVBLGdEQUFnRDtBQUN6QyxNQUFNTSxvQkFBb0I3QjtJQUMvQkMsWUFBWUUsVUFBc0IsQ0FBQyxDQUFDLEVBQUVDLFNBQXFDLENBQUU7UUFDM0UsS0FBSyxDQUFDLFNBQVNELFNBQVNDO0lBQzFCO0lBRUEwQixhQUNFQyxTQUFpQixFQUNqQkMsR0FBVyxFQUNYQyxRQUFnQixFQUNoQkMsT0FBZ0IsRUFDaEIxQixRQUE4QixFQUN4QjtRQUNOLE1BQU1VLFFBQVFnQixVQUFVLFVBQVU7UUFDbEMsTUFBTTNCLFVBQVUsQ0FBQyxNQUFNLEVBQUV3QixVQUFVLFVBQVUsRUFBRUMsS0FBSztRQUVwRCxJQUFJLENBQUN2QixHQUFHLENBQUNTLE9BQU9YLFNBQVM7WUFDdkIsR0FBR0MsUUFBUTtZQUNYdUI7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRjtJQUNGO0lBRUFDLFlBQVlILEdBQVcsRUFBRXhCLFFBQThCLEVBQVE7UUFDN0QsSUFBSSxDQUFDRixLQUFLLENBQUMsYUFBYTtZQUN0QixHQUFHRSxRQUFRO1lBQ1h1QixXQUFXO1lBQ1hDO1lBQ0FJLFFBQVE7UUFDVjtJQUNGO0lBRUFDLGFBQWFMLEdBQVcsRUFBRXhCLFFBQThCLEVBQVE7UUFDOUQsSUFBSSxDQUFDRixLQUFLLENBQUMsY0FBYztZQUN2QixHQUFHRSxRQUFRO1lBQ1h1QixXQUFXO1lBQ1hDO1lBQ0FJLFFBQVE7UUFDVjtJQUNGO0lBRUFFLFlBQVlOLEdBQVcsRUFBRU8sR0FBVyxFQUFFQyxJQUFZLEVBQUVoQyxRQUE4QixFQUFRO1FBQ3hGLElBQUksQ0FBQ0YsS0FBSyxDQUFDLGFBQWE7WUFDdEIsR0FBR0UsUUFBUTtZQUNYdUIsV0FBVztZQUNYQztZQUNBTztZQUNBQztRQUNGO0lBQ0Y7SUFFQUMsY0FDRVYsU0FBaUIsRUFDakJDLEdBQVcsRUFDWHBCLEtBQVksRUFDWkosUUFBOEIsRUFDeEI7UUFDTixJQUFJLENBQUNJLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRW1CLFVBQVUsaUJBQWlCLEVBQUVDLEtBQUssRUFBRXBCLE9BQU87WUFDN0QsR0FBR0osUUFBUTtZQUNYdUI7WUFDQUM7UUFDRjtJQUNGO0lBRVF2QixJQUNOUyxLQUFlLEVBQ2ZYLE9BQWUsRUFDZkMsUUFBOEIsRUFDOUJJLEtBQXlCLEVBQ25CO1FBQ04scUNBQXFDO1FBQ3JDLE1BQU1PLFFBQWtCO1lBQ3RCQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7WUFDakNKO1lBQ0FYO1lBQ0FMLFFBQVE7WUFDUjZCLFdBQVd2QixVQUFVdUI7WUFDckJFLFVBQVV6QixVQUFVeUI7WUFDcEI5QixTQUFTLElBQUksQ0FBQ0EsT0FBTztZQUNyQks7WUFDQUk7UUFDRjtRQUdDLElBQUssQ0FBU1IsU0FBUyxDQUFDZTtJQUMzQjtBQUNGO0FBRUEsd0NBQXdDO0FBQ2pDLFNBQVN1QixjQUFjdkIsS0FBZTtJQUMzQ1MsUUFBUW5CLEdBQUcsQ0FBQ2tDLEtBQUtDLFNBQVMsQ0FBQ3pCO0FBQzdCO0FBRUEsbUNBQW1DO0FBQzVCLFNBQVMwQixnQkFBZ0IxQixLQUFlO0lBQzdDLE1BQU0sRUFBRUQsS0FBSyxFQUFFWCxPQUFPLEVBQUVMLE1BQU0sRUFBRTZCLFNBQVMsRUFBRUUsUUFBUSxFQUFFOUIsT0FBTyxFQUFFSyxRQUFRLEVBQUVJLEtBQUssRUFBRSxHQUFHTztJQUVsRixNQUFNMkIsUUFBUTtRQUNaLENBQUMsQ0FBQyxFQUFFM0IsTUFBTUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUMsRUFBRWxCLE9BQU8sQ0FBQyxDQUFDO1FBQ2JnQixNQUFNTyxXQUFXLEdBQUdzQixNQUFNLENBQUM7S0FDNUI7SUFFRCxJQUFJNUMsU0FBU3dCLGVBQWU7UUFDMUJtQixNQUFNRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU3QyxRQUFRd0IsYUFBYSxDQUFDc0IsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDekQ7SUFFQSxJQUFJbEIsV0FBVztRQUNiZSxNQUFNRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUVqQixVQUFVLENBQUMsQ0FBQztJQUM3QjtJQUVBZSxNQUFNRSxJQUFJLENBQUN6QztJQUVYLElBQUkwQixhQUFhakIsV0FBVztRQUMxQjhCLE1BQU1FLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRWYsU0FBUyxHQUFHLENBQUM7SUFDOUI7SUFFQSxNQUFNaUIsYUFBYUosTUFBTUssSUFBSSxDQUFDO0lBRTlCLHFCQUFxQjtJQUNyQixPQUFRakM7UUFDTixLQUFLO1lBQ0hVLFFBQVF0QixLQUFLLENBQUM0QyxZQUFZMUMsWUFBWTtZQUN0QztRQUNGLEtBQUs7WUFDSG9CLFFBQVFsQixJQUFJLENBQUN3QyxZQUFZMUMsWUFBWTtZQUNyQztRQUNGLEtBQUs7WUFDSG9CLFFBQVFqQixJQUFJLENBQUN1QyxZQUFZMUMsWUFBWTtZQUNyQyxJQUFJSSxPQUFPZ0IsUUFBUWpCLElBQUksQ0FBQ0M7WUFDeEI7UUFDRixLQUFLO1lBQ0hnQixRQUFRaEIsS0FBSyxDQUFDc0MsWUFBWTFDLFlBQVk7WUFDdEMsSUFBSUksT0FBT2dCLFFBQVFoQixLQUFLLENBQUNBO1lBQ3pCO0lBQ0o7QUFDRjtBQUVBLHFDQUFxQztBQUM5QixTQUFTd0M7SUFDZCxPQUFPLEdBQUcvQixLQUFLZ0MsR0FBRyxHQUFHLENBQUMsRUFBRUMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSVAsU0FBUyxDQUFDLEdBQUcsSUFBSTtBQUN0RSIsInNvdXJjZXMiOlsiL1VzZXJzL3J1YmVlbi9kZXYvcGVyc29uYWwvYWlycG9ydC1kYi9zcmMvbGliL2NhY2hlL29ic2VydmFiaWxpdHkvbG9nZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFN0cnVjdHVyZWQgbG9nZ2luZyBmb3IgY2FjaGUgb3BlcmF0aW9uc1xuLy8gUHJvdmlkZXMgY29uc2lzdGVudCwgcXVlcnlhYmxlIGxvZ3Mgd2l0aCBjb3JyZWxhdGlvbiBJRHNcblxuZXhwb3J0IHR5cGUgTG9nTGV2ZWwgPSAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJ1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ0NvbnRleHQge1xuICBjb3JyZWxhdGlvbklkPzogc3RyaW5nXG4gIHVzZXJJZD86IHN0cmluZ1xuICBzZXNzaW9uSWQ/OiBzdHJpbmdcbiAgcmVxdWVzdElkPzogc3RyaW5nXG4gIFtrZXk6IHN0cmluZ106IGFueVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ0VudHJ5IHtcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgbGV2ZWw6IExvZ0xldmVsXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICBtb2R1bGU6IHN0cmluZ1xuICBvcGVyYXRpb24/OiBzdHJpbmdcbiAgZHVyYXRpb24/OiBudW1iZXJcbiAgY29udGV4dD86IExvZ0NvbnRleHRcbiAgZXJyb3I/OiB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgbWVzc2FnZTogc3RyaW5nXG4gICAgc3RhY2s/OiBzdHJpbmdcbiAgfVxuICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dnZXIge1xuICBkZWJ1ZzogKG1lc3NhZ2U6IHN0cmluZywgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB2b2lkXG4gIGluZm86IChtZXNzYWdlOiBzdHJpbmcsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PikgPT4gdm9pZFxuICB3YXJuOiAobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHZvaWRcbiAgZXJyb3I6IChtZXNzYWdlOiBzdHJpbmcsIGVycm9yPzogRXJyb3IsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PikgPT4gdm9pZFxuICBjaGlsZDogKGNvbnRleHQ6IExvZ0NvbnRleHQpID0+IExvZ2dlclxufVxuXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlZExvZ2dlciBpbXBsZW1lbnRzIExvZ2dlciB7XG4gIHByaXZhdGUgY29udGV4dDogTG9nQ29udGV4dFxuICBwcml2YXRlIG1vZHVsZTogc3RyaW5nXG4gIHByaXZhdGUgdHJhbnNwb3J0OiAoZW50cnk6IExvZ0VudHJ5KSA9PiB2b2lkXG4gIFxuICBjb25zdHJ1Y3RvcihcbiAgICBtb2R1bGU6IHN0cmluZyxcbiAgICBjb250ZXh0OiBMb2dDb250ZXh0ID0ge30sXG4gICAgdHJhbnNwb3J0PzogKGVudHJ5OiBMb2dFbnRyeSkgPT4gdm9pZFxuICApIHtcbiAgICB0aGlzLm1vZHVsZSA9IG1vZHVsZVxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHRcbiAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydCB8fCB0aGlzLmRlZmF1bHRUcmFuc3BvcnRcbiAgfVxuICBcbiAgZGVidWcobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmxvZygnZGVidWcnLCBtZXNzYWdlLCBtZXRhZGF0YSlcbiAgfVxuICBcbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pik6IHZvaWQge1xuICAgIHRoaXMubG9nKCdpbmZvJywgbWVzc2FnZSwgbWV0YWRhdGEpXG4gIH1cbiAgXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmxvZygnd2FybicsIG1lc3NhZ2UsIG1ldGFkYXRhKVxuICB9XG4gIFxuICBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGVycm9yPzogRXJyb3IsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pik6IHZvaWQge1xuICAgIGNvbnN0IGVycm9ySW5mbyA9IGVycm9yID8ge1xuICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2tcbiAgICB9IDogdW5kZWZpbmVkXG4gICAgXG4gICAgdGhpcy5sb2coJ2Vycm9yJywgbWVzc2FnZSwgbWV0YWRhdGEsIGVycm9ySW5mbylcbiAgfVxuICBcbiAgY2hpbGQoY29udGV4dDogTG9nQ29udGV4dCk6IExvZ2dlciB7XG4gICAgcmV0dXJuIG5ldyBTdHJ1Y3R1cmVkTG9nZ2VyKFxuICAgICAgdGhpcy5tb2R1bGUsXG4gICAgICB7IC4uLnRoaXMuY29udGV4dCwgLi4uY29udGV4dCB9LFxuICAgICAgdGhpcy50cmFuc3BvcnRcbiAgICApXG4gIH1cbiAgXG4gIHByaXZhdGUgbG9nKFxuICAgIGxldmVsOiBMb2dMZXZlbCxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGVycm9yPzogTG9nRW50cnlbJ2Vycm9yJ11cbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZW50cnk6IExvZ0VudHJ5ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBsZXZlbCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBtb2R1bGU6IHRoaXMubW9kdWxlLFxuICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBlcnJvclxuICAgIH1cbiAgICBcbiAgICB0aGlzLnRyYW5zcG9ydChlbnRyeSlcbiAgfVxuICBcbiAgcHJpdmF0ZSBkZWZhdWx0VHJhbnNwb3J0KGVudHJ5OiBMb2dFbnRyeSk6IHZvaWQge1xuICAgIGNvbnN0IHsgbGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QgfSA9IGVudHJ5XG4gICAgXG4gICAgLy8gRm9ybWF0IGZvciBjb25zb2xlIG91dHB1dFxuICAgIGNvbnN0IHByZWZpeCA9IGBbJHtlbnRyeS50aW1lc3RhbXB9XSBbJHtlbnRyeS5tb2R1bGV9XSAke2xldmVsLnRvVXBwZXJDYXNlKCl9YFxuICAgIGNvbnN0IGNvbnRleHRTdHIgPSBlbnRyeS5jb250ZXh0Py5jb3JyZWxhdGlvbklkIFxuICAgICAgPyBgIFske2VudHJ5LmNvbnRleHQuY29ycmVsYXRpb25JZH1dYCBcbiAgICAgIDogJydcbiAgICBcbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlICdkZWJ1Zyc6XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYCR7cHJlZml4fSR7Y29udGV4dFN0cn06YCwgbWVzc2FnZSwgcmVzdClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICBjb25zb2xlLmluZm8oYCR7cHJlZml4fSR7Y29udGV4dFN0cn06YCwgbWVzc2FnZSwgcmVzdClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICBjb25zb2xlLndhcm4oYCR7cHJlZml4fSR7Y29udGV4dFN0cn06YCwgbWVzc2FnZSwgcmVzdClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHtwcmVmaXh9JHtjb250ZXh0U3RyfTpgLCBtZXNzYWdlLCByZXN0KVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vLyBDYWNoZS1zcGVjaWZpYyBsb2dnZXIgd2l0aCBvcGVyYXRpb24gdHJhY2tpbmdcbmV4cG9ydCBjbGFzcyBDYWNoZUxvZ2dlciBleHRlbmRzIFN0cnVjdHVyZWRMb2dnZXIge1xuICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBMb2dDb250ZXh0ID0ge30sIHRyYW5zcG9ydD86IChlbnRyeTogTG9nRW50cnkpID0+IHZvaWQpIHtcbiAgICBzdXBlcignY2FjaGUnLCBjb250ZXh0LCB0cmFuc3BvcnQpXG4gIH1cbiAgXG4gIGxvZ09wZXJhdGlvbihcbiAgICBvcGVyYXRpb246IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBkdXJhdGlvbjogbnVtYmVyLFxuICAgIHN1Y2Nlc3M6IGJvb2xlYW4sXG4gICAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxldmVsID0gc3VjY2VzcyA/ICdkZWJ1ZycgOiAnd2FybidcbiAgICBjb25zdCBtZXNzYWdlID0gYENhY2hlICR7b3BlcmF0aW9ufSBmb3Iga2V5OiAke2tleX1gXG4gICAgXG4gICAgdGhpcy5sb2cobGV2ZWwsIG1lc3NhZ2UsIHtcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgb3BlcmF0aW9uLFxuICAgICAga2V5LFxuICAgICAgZHVyYXRpb24sXG4gICAgICBzdWNjZXNzXG4gICAgfSlcbiAgfVxuICBcbiAgbG9nQ2FjaGVIaXQoa2V5OiBzdHJpbmcsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pik6IHZvaWQge1xuICAgIHRoaXMuZGVidWcoJ0NhY2hlIGhpdCcsIHtcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgb3BlcmF0aW9uOiAnZ2V0JyxcbiAgICAgIGtleSxcbiAgICAgIHJlc3VsdDogJ2hpdCdcbiAgICB9KVxuICB9XG4gIFxuICBsb2dDYWNoZU1pc3Moa2V5OiBzdHJpbmcsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pik6IHZvaWQge1xuICAgIHRoaXMuZGVidWcoJ0NhY2hlIG1pc3MnLCB7XG4gICAgICAuLi5tZXRhZGF0YSxcbiAgICAgIG9wZXJhdGlvbjogJ2dldCcsXG4gICAgICBrZXksXG4gICAgICByZXN1bHQ6ICdtaXNzJ1xuICAgIH0pXG4gIH1cbiAgXG4gIGxvZ0NhY2hlU2V0KGtleTogc3RyaW5nLCB0dGw6IG51bWJlciwgc2l6ZTogbnVtYmVyLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmRlYnVnKCdDYWNoZSBzZXQnLCB7XG4gICAgICAuLi5tZXRhZGF0YSxcbiAgICAgIG9wZXJhdGlvbjogJ3NldCcsXG4gICAgICBrZXksXG4gICAgICB0dGwsXG4gICAgICBzaXplXG4gICAgfSlcbiAgfVxuICBcbiAgbG9nQ2FjaGVFcnJvcihcbiAgICBvcGVyYXRpb246IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBlcnJvcjogRXJyb3IsXG4gICAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IHZvaWQge1xuICAgIHRoaXMuZXJyb3IoYENhY2hlICR7b3BlcmF0aW9ufSBmYWlsZWQgZm9yIGtleTogJHtrZXl9YCwgZXJyb3IsIHtcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgb3BlcmF0aW9uLFxuICAgICAga2V5XG4gICAgfSlcbiAgfVxuICBcbiAgcHJpdmF0ZSBsb2coXG4gICAgbGV2ZWw6IExvZ0xldmVsLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgZXJyb3I/OiBMb2dFbnRyeVsnZXJyb3InXVxuICApOiB2b2lkIHtcbiAgICAvLyBPdmVycmlkZSB0byBhZGQgb3BlcmF0aW9uIHRyYWNraW5nXG4gICAgY29uc3QgZW50cnk6IExvZ0VudHJ5ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBsZXZlbCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBtb2R1bGU6ICdjYWNoZScsXG4gICAgICBvcGVyYXRpb246IG1ldGFkYXRhPy5vcGVyYXRpb24sXG4gICAgICBkdXJhdGlvbjogbWV0YWRhdGE/LmR1cmF0aW9uLFxuICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBlcnJvclxuICAgIH1cbiAgICBcbiAgICAvLyBDYWxsIHBhcmVudCB0cmFuc3BvcnRcbiAgICA7KHRoaXMgYXMgYW55KS50cmFuc3BvcnQoZW50cnkpXG4gIH1cbn1cblxuLy8gSlNPTiBmb3JtYXR0ZXIgZm9yIHByb2R1Y3Rpb24gbG9nZ2luZ1xuZXhwb3J0IGZ1bmN0aW9uIGpzb25UcmFuc3BvcnQoZW50cnk6IExvZ0VudHJ5KTogdm9pZCB7XG4gIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGVudHJ5KSlcbn1cblxuLy8gUHJldHR5IGZvcm1hdHRlciBmb3IgZGV2ZWxvcG1lbnRcbmV4cG9ydCBmdW5jdGlvbiBwcmV0dHlUcmFuc3BvcnQoZW50cnk6IExvZ0VudHJ5KTogdm9pZCB7XG4gIGNvbnN0IHsgbGV2ZWwsIG1lc3NhZ2UsIG1vZHVsZSwgb3BlcmF0aW9uLCBkdXJhdGlvbiwgY29udGV4dCwgbWV0YWRhdGEsIGVycm9yIH0gPSBlbnRyeVxuICBcbiAgY29uc3QgcGFydHMgPSBbXG4gICAgYFske2VudHJ5LnRpbWVzdGFtcH1dYCxcbiAgICBgWyR7bW9kdWxlfV1gLFxuICAgIGxldmVsLnRvVXBwZXJDYXNlKCkucGFkRW5kKDUpXG4gIF1cbiAgXG4gIGlmIChjb250ZXh0Py5jb3JyZWxhdGlvbklkKSB7XG4gICAgcGFydHMucHVzaChgWyR7Y29udGV4dC5jb3JyZWxhdGlvbklkLnN1YnN0cmluZygwLCA4KX1dYClcbiAgfVxuICBcbiAgaWYgKG9wZXJhdGlvbikge1xuICAgIHBhcnRzLnB1c2goYFske29wZXJhdGlvbn1dYClcbiAgfVxuICBcbiAgcGFydHMucHVzaChtZXNzYWdlKVxuICBcbiAgaWYgKGR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBwYXJ0cy5wdXNoKGAoJHtkdXJhdGlvbn1tcylgKVxuICB9XG4gIFxuICBjb25zdCBsb2dNZXNzYWdlID0gcGFydHMuam9pbignICcpXG4gIFxuICAvLyBMb2cgYmFzZWQgb24gbGV2ZWxcbiAgc3dpdGNoIChsZXZlbCkge1xuICAgIGNhc2UgJ2RlYnVnJzpcbiAgICAgIGNvbnNvbGUuZGVidWcobG9nTWVzc2FnZSwgbWV0YWRhdGEgfHwgJycpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2luZm8nOlxuICAgICAgY29uc29sZS5pbmZvKGxvZ01lc3NhZ2UsIG1ldGFkYXRhIHx8ICcnKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd3YXJuJzpcbiAgICAgIGNvbnNvbGUud2Fybihsb2dNZXNzYWdlLCBtZXRhZGF0YSB8fCAnJylcbiAgICAgIGlmIChlcnJvcikgY29uc29sZS53YXJuKGVycm9yKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICBjb25zb2xlLmVycm9yKGxvZ01lc3NhZ2UsIG1ldGFkYXRhIHx8ICcnKVxuICAgICAgaWYgKGVycm9yKSBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgYnJlYWtcbiAgfVxufVxuXG4vLyBIZWxwZXIgdG8gZ2VuZXJhdGUgY29ycmVsYXRpb24gSURzXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDb3JyZWxhdGlvbklkKCk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCA5KX1gXG59Il0sIm5hbWVzIjpbIlN0cnVjdHVyZWRMb2dnZXIiLCJjb25zdHJ1Y3RvciIsIm1vZHVsZSIsImNvbnRleHQiLCJ0cmFuc3BvcnQiLCJkZWZhdWx0VHJhbnNwb3J0IiwiZGVidWciLCJtZXNzYWdlIiwibWV0YWRhdGEiLCJsb2ciLCJpbmZvIiwid2FybiIsImVycm9yIiwiZXJyb3JJbmZvIiwibmFtZSIsInN0YWNrIiwidW5kZWZpbmVkIiwiY2hpbGQiLCJsZXZlbCIsImVudHJ5IiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicmVzdCIsInByZWZpeCIsInRvVXBwZXJDYXNlIiwiY29udGV4dFN0ciIsImNvcnJlbGF0aW9uSWQiLCJjb25zb2xlIiwiQ2FjaGVMb2dnZXIiLCJsb2dPcGVyYXRpb24iLCJvcGVyYXRpb24iLCJrZXkiLCJkdXJhdGlvbiIsInN1Y2Nlc3MiLCJsb2dDYWNoZUhpdCIsInJlc3VsdCIsImxvZ0NhY2hlTWlzcyIsImxvZ0NhY2hlU2V0IiwidHRsIiwic2l6ZSIsImxvZ0NhY2hlRXJyb3IiLCJqc29uVHJhbnNwb3J0IiwiSlNPTiIsInN0cmluZ2lmeSIsInByZXR0eVRyYW5zcG9ydCIsInBhcnRzIiwicGFkRW5kIiwicHVzaCIsInN1YnN0cmluZyIsImxvZ01lc3NhZ2UiLCJqb2luIiwiZ2VuZXJhdGVDb3JyZWxhdGlvbklkIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache/observability/logger.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache/observability/metrics.ts":
/*!************************************************!*\
  !*** ./src/lib/cache/observability/metrics.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheMetricsCollector: () => (/* binding */ CacheMetricsCollector),\n/* harmony export */   SimpleLatencyTracker: () => (/* binding */ SimpleLatencyTracker),\n/* harmony export */   formatMetricsForPrometheus: () => (/* binding */ formatMetricsForPrometheus)\n/* harmony export */ });\n// Cache observability metrics implementation\n// Provides performance tracking, monitoring, and structured logging\nclass SimpleLatencyTracker {\n    record(duration) {\n        this.samples.push(duration);\n        if (this.samples.length > this.maxSamples) {\n            this.samples.shift();\n        }\n    }\n    getAverage() {\n        if (this.samples.length === 0) return 0;\n        const sum = this.samples.reduce((a, b)=>a + b, 0);\n        return sum / this.samples.length;\n    }\n    getPercentile(percentile) {\n        if (this.samples.length === 0) return 0;\n        const sorted = [\n            ...this.samples\n        ].sort((a, b)=>a - b);\n        const index = Math.ceil(percentile / 100 * sorted.length) - 1;\n        return sorted[Math.max(0, index)];\n    }\n    reset() {\n        this.samples = [];\n    }\n    constructor(){\n        this.samples = [];\n        this.maxSamples = 1000;\n    }\n}\nclass CacheMetricsCollector {\n    constructor(initialStats){\n        this.getLatency = new SimpleLatencyTracker();\n        this.setLatency = new SimpleLatencyTracker();\n        this.hourlyWindow = [];\n        this.HOUR_IN_MS = 60 * 60 * 1000;\n        this.stats = initialStats;\n    }\n    recordOperation(operation, duration, success) {\n        if (operation === 'get') {\n            this.getLatency.record(duration);\n        } else {\n            this.setLatency.record(duration);\n        }\n        if (!success) {\n            this.stats.errors++;\n        }\n    }\n    recordEvent(event) {\n        const now = Date.now();\n        // Update stats based on event type\n        switch(event.type){\n            case 'hit':\n                this.stats.hits++;\n                break;\n            case 'miss':\n                this.stats.misses++;\n                break;\n            case 'stale-hit':\n                this.stats.staleHits++;\n                break;\n            case 'error':\n                this.stats.errors++;\n                break;\n        }\n        // Record for hourly metrics\n        this.hourlyWindow.push({\n            timestamp: now,\n            event: event.type\n        });\n        // Clean up old entries\n        this.cleanupHourlyWindow(now);\n    }\n    getMetrics() {\n        const totalOps = this.stats.hits + this.stats.misses;\n        const now = Date.now();\n        this.cleanupHourlyWindow(now);\n        const lastHour = this.calculateHourlyMetrics();\n        return {\n            // Performance metrics\n            hitRate: totalOps > 0 ? this.stats.hits / totalOps : 0,\n            missRate: totalOps > 0 ? this.stats.misses / totalOps : 0,\n            staleRate: this.stats.hits > 0 ? this.stats.staleHits / this.stats.hits : 0,\n            errorRate: totalOps > 0 ? this.stats.errors / totalOps : 0,\n            // Latency metrics\n            avgGetLatency: this.getLatency.getAverage(),\n            avgSetLatency: this.setLatency.getAverage(),\n            p95GetLatency: this.getLatency.getPercentile(95),\n            p95SetLatency: this.setLatency.getPercentile(95),\n            // Size metrics\n            totalSize: this.stats.size,\n            entryCount: this.stats.entries,\n            avgEntrySize: this.stats.entries > 0 ? this.stats.size / this.stats.entries : 0,\n            // Operation counts\n            totalGets: this.stats.hits + this.stats.misses,\n            totalSets: 0,\n            totalDeletes: 0,\n            totalErrors: this.stats.errors,\n            // Time-based metrics\n            lastHour\n        };\n    }\n    updateStats(stats) {\n        Object.assign(this.stats, stats);\n    }\n    reset() {\n        this.stats = {\n            hits: 0,\n            misses: 0,\n            staleHits: 0,\n            errors: 0,\n            size: 0,\n            entries: 0,\n            lastReset: Date.now()\n        };\n        this.getLatency.reset();\n        this.setLatency.reset();\n        this.hourlyWindow = [];\n    }\n    cleanupHourlyWindow(now) {\n        const hourAgo = now - this.HOUR_IN_MS;\n        this.hourlyWindow = this.hourlyWindow.filter((entry)=>entry.timestamp > hourAgo);\n    }\n    calculateHourlyMetrics() {\n        const counts = {\n            hits: 0,\n            misses: 0,\n            sets: 0,\n            errors: 0\n        };\n        for (const entry of this.hourlyWindow){\n            switch(entry.event){\n                case 'hit':\n                    counts.hits++;\n                    break;\n                case 'miss':\n                    counts.misses++;\n                    break;\n                case 'set':\n                    counts.sets++;\n                    break;\n                case 'error':\n                    counts.errors++;\n                    break;\n            }\n        }\n        return counts;\n    }\n}\n// Prometheus-style metrics formatter\nfunction formatMetricsForPrometheus(metrics, prefix = 'cache') {\n    const lines = [\n        `# HELP ${prefix}_hit_rate Cache hit rate (0-1)`,\n        `# TYPE ${prefix}_hit_rate gauge`,\n        `${prefix}_hit_rate ${metrics.hitRate.toFixed(4)}`,\n        `# HELP ${prefix}_miss_rate Cache miss rate (0-1)`,\n        `# TYPE ${prefix}_miss_rate gauge`,\n        `${prefix}_miss_rate ${metrics.missRate.toFixed(4)}`,\n        `# HELP ${prefix}_error_rate Cache error rate (0-1)`,\n        `# TYPE ${prefix}_error_rate gauge`,\n        `${prefix}_error_rate ${metrics.errorRate.toFixed(4)}`,\n        `# HELP ${prefix}_get_latency_avg Average GET latency in milliseconds`,\n        `# TYPE ${prefix}_get_latency_avg gauge`,\n        `${prefix}_get_latency_avg ${metrics.avgGetLatency.toFixed(2)}`,\n        `# HELP ${prefix}_get_latency_p95 95th percentile GET latency in milliseconds`,\n        `# TYPE ${prefix}_get_latency_p95 gauge`,\n        `${prefix}_get_latency_p95 ${metrics.p95GetLatency.toFixed(2)}`,\n        `# HELP ${prefix}_size_bytes Total cache size in bytes`,\n        `# TYPE ${prefix}_size_bytes gauge`,\n        `${prefix}_size_bytes ${metrics.totalSize}`,\n        `# HELP ${prefix}_entries Total number of cache entries`,\n        `# TYPE ${prefix}_entries gauge`,\n        `${prefix}_entries ${metrics.entryCount}`,\n        `# HELP ${prefix}_operations_total Total cache operations by type`,\n        `# TYPE ${prefix}_operations_total counter`,\n        `${prefix}_operations_total{type=\"get\"} ${metrics.totalGets}`,\n        `${prefix}_operations_total{type=\"error\"} ${metrics.totalErrors}`\n    ];\n    return lines.join('\\n');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache/observability/metrics.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/airportCache.ts":
/*!*********************************************!*\
  !*** ./src/server/services/airportCache.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   airportCache: () => (/* binding */ airportCache)\n/* harmony export */ });\n/* harmony import */ var _redisClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./redisClient */ \"(rsc)/./src/server/services/redisClient.ts\");\n/* harmony import */ var _concurrencyManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./concurrencyManager */ \"(rsc)/./src/server/services/concurrencyManager.ts\");\n/* harmony import */ var _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inMemoryCache */ \"(rsc)/./src/server/services/inMemoryCache.ts\");\n/* harmony import */ var _circuitBreaker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./circuitBreaker */ \"(rsc)/./src/server/services/circuitBreaker.ts\");\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(rsc)/./src/lib/cache/observability/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_redisClient__WEBPACK_IMPORTED_MODULE_0__, _concurrencyManager__WEBPACK_IMPORTED_MODULE_1__]);\n([_redisClient__WEBPACK_IMPORTED_MODULE_0__, _concurrencyManager__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// Airport caching service implementation\n\n\n\n\n\nconst DEFAULT_TTL = parseInt(process.env.AIRPORT_CACHE_TTL || '2592000', 10) // 30 days\n;\nconst CACHE_PREFIX = 'airport:';\nconst STATS_KEY = 'airport:stats';\nconst USE_IN_MEMORY_FALLBACK = process.env.USE_IN_MEMORY_CACHE_FALLBACK !== 'false';\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_4__.StructuredLogger('airport-cache', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_4__.prettyTransport);\nclass AirportCacheService {\n    constructor(){\n        this.redis = null;\n        this.fallbackMode = false;\n        this.exponentialBackoff = new _circuitBreaker__WEBPACK_IMPORTED_MODULE_3__.ExponentialBackoff(parseInt(process.env.REDIS_BACKOFF_BASE_DELAY || '1000', 10), parseInt(process.env.REDIS_BACKOFF_MAX_DELAY || '30000', 10), parseInt(process.env.REDIS_BACKOFF_MAX_ATTEMPTS || '3', 10));\n    }\n    async initialize() {\n        this.redis = await (0,_redisClient__WEBPACK_IMPORTED_MODULE_0__.getRedisClient)();\n        if (!this.redis) {\n            logger.warn('Redis not available, operating in fallback mode');\n            this.fallbackMode = true;\n        }\n        // Initialize in-memory cache if fallback is enabled\n        if (USE_IN_MEMORY_FALLBACK) {\n            await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.initialize();\n        }\n        await _concurrencyManager__WEBPACK_IMPORTED_MODULE_1__.concurrencyManager.initialize();\n    }\n    getCacheKey(code) {\n        return `${CACHE_PREFIX}${code.toUpperCase()}`;\n    }\n    async get(code) {\n        const key = this.getCacheKey(code);\n        const circuitBreaker = (0,_redisClient__WEBPACK_IMPORTED_MODULE_0__.getRedisCircuitBreaker)();\n        // If Redis is in fallback mode or circuit is open, try in-memory cache\n        if (this.fallbackMode || !this.redis || circuitBreaker && circuitBreaker.getState() === _circuitBreaker__WEBPACK_IMPORTED_MODULE_3__.CircuitState.OPEN) {\n            if (USE_IN_MEMORY_FALLBACK) {\n                logger.debug('Using in-memory cache fallback', {\n                    code\n                });\n                const result = await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.get(key);\n                if (result) {\n                    await this.incrementStat('hits');\n                    return result;\n                }\n            }\n            await this.incrementStat('misses');\n            return null;\n        }\n        try {\n            // Try Redis with exponential backoff\n            const cached = await this.exponentialBackoff.execute(async ()=>{\n                if (!this.redis) throw new Error('Redis client not available');\n                return await this.redis.get(key);\n            });\n            if (!cached) {\n                // Check in-memory cache as second level\n                if (USE_IN_MEMORY_FALLBACK) {\n                    const inMemoryResult = await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.get(key);\n                    if (inMemoryResult) {\n                        await this.incrementStat('hits');\n                        logger.debug('Cache hit from in-memory fallback', {\n                            code\n                        });\n                        return inMemoryResult;\n                    }\n                }\n                await this.incrementStat('misses');\n                return null;\n            }\n            await this.incrementStat('hits');\n            const result = JSON.parse(cached);\n            // Update in-memory cache with Redis data\n            if (USE_IN_MEMORY_FALLBACK && result) {\n                await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.set(key, result.data, DEFAULT_TTL);\n            }\n            return result;\n        } catch (error) {\n            logger.error('Cache get error, falling back to in-memory', error);\n            await this.incrementStat('errors');\n            // Fallback to in-memory cache on error\n            if (USE_IN_MEMORY_FALLBACK) {\n                const result = await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.get(key);\n                if (result) {\n                    logger.info('Successfully retrieved from in-memory cache after Redis error', {\n                        code\n                    });\n                    return result;\n                }\n            }\n            return null;\n        }\n    }\n    async set(code, airport, ttl = DEFAULT_TTL) {\n        const key = this.getCacheKey(code);\n        const now = Date.now();\n        const cacheItem = {\n            data: airport,\n            source: 'cache',\n            fetchedAt: now,\n            expiresAt: now + ttl * 1000\n        };\n        // Always update in-memory cache if enabled\n        if (USE_IN_MEMORY_FALLBACK) {\n            await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.set(key, airport, ttl);\n        }\n        // Skip Redis if in fallback mode\n        if (this.fallbackMode || !this.redis) {\n            logger.debug('Skipping Redis set due to fallback mode', {\n                code\n            });\n            return;\n        }\n        const circuitBreaker = (0,_redisClient__WEBPACK_IMPORTED_MODULE_0__.getRedisCircuitBreaker)();\n        if (circuitBreaker && circuitBreaker.getState() === _circuitBreaker__WEBPACK_IMPORTED_MODULE_3__.CircuitState.OPEN) {\n            logger.debug('Skipping Redis set due to open circuit', {\n                code\n            });\n            return;\n        }\n        try {\n            // Try to set in Redis with exponential backoff\n            await this.exponentialBackoff.execute(async ()=>{\n                if (!this.redis) throw new Error('Redis client not available');\n                await this.redis.setex(key, ttl, JSON.stringify(cacheItem));\n            });\n            logger.debug('Successfully cached airport in Redis', {\n                code,\n                ttl\n            });\n        } catch (error) {\n            logger.error('Cache set error, data saved to in-memory cache only', error);\n            await this.incrementStat('errors');\n        }\n    }\n    async delete(code) {\n        if (this.fallbackMode || !this.redis) {\n            return false;\n        }\n        try {\n            const key = this.getCacheKey(code);\n            const result = await this.redis.del(key);\n            return result === 1;\n        } catch (error) {\n            console.error('Cache delete error:', error);\n            return false;\n        }\n    }\n    async exists(code) {\n        if (this.fallbackMode || !this.redis) {\n            return false;\n        }\n        try {\n            const key = this.getCacheKey(code);\n            const result = await this.redis.exists(key);\n            return result === 1;\n        } catch (error) {\n            console.error('Cache exists error:', error);\n            return false;\n        }\n    }\n    async clear(pattern) {\n        if (this.fallbackMode || !this.redis) {\n            return 0;\n        }\n        try {\n            const searchPattern = pattern ? `${CACHE_PREFIX}${pattern}*` : `${CACHE_PREFIX}*`;\n            const keys = await this.redis.keys(searchPattern);\n            if (keys.length === 0) {\n                return 0;\n            }\n            const result = await this.redis.del(...keys);\n            return result;\n        } catch (error) {\n            console.error('Cache clear error:', error);\n            return 0;\n        }\n    }\n    async getStats() {\n        // Get in-memory stats first\n        let inMemoryStats = null;\n        if (USE_IN_MEMORY_FALLBACK) {\n            inMemoryStats = await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.getStats();\n        }\n        if (this.fallbackMode || !this.redis) {\n            return inMemoryStats || {\n                hits: 0,\n                misses: 0,\n                errors: 0,\n                lastReset: Date.now()\n            };\n        }\n        try {\n            const stats = await this.redis.hgetall(STATS_KEY);\n            const redisStats = {\n                hits: parseInt(stats.hits || '0', 10),\n                misses: parseInt(stats.misses || '0', 10),\n                errors: parseInt(stats.errors || '0', 10),\n                lastReset: parseInt(stats.lastReset || Date.now().toString(), 10)\n            };\n            // If we have both, return Redis stats as primary\n            // In-memory stats are just for fallback tracking\n            return redisStats;\n        } catch (error) {\n            logger.error('Get stats error, returning in-memory stats', error);\n            return inMemoryStats || {\n                hits: 0,\n                misses: 0,\n                errors: 0,\n                lastReset: Date.now()\n            };\n        }\n    }\n    async incrementStat(stat) {\n        // Always track stats in in-memory cache if available\n        if (USE_IN_MEMORY_FALLBACK) {\n            const stats = await _inMemoryCache__WEBPACK_IMPORTED_MODULE_2__.inMemoryAirportCache.getStats();\n            if (stat === 'hits') stats.hits++;\n            else if (stat === 'misses') stats.misses++;\n            else if (stat === 'errors') stats.errors++;\n        }\n        if (this.fallbackMode || !this.redis) {\n            return;\n        }\n        const circuitBreaker = (0,_redisClient__WEBPACK_IMPORTED_MODULE_0__.getRedisCircuitBreaker)();\n        if (circuitBreaker && circuitBreaker.getState() === _circuitBreaker__WEBPACK_IMPORTED_MODULE_3__.CircuitState.OPEN) {\n            return;\n        }\n        try {\n            await this.redis.hincrby(STATS_KEY, stat, 1);\n            await this.redis.hset(STATS_KEY, 'lastUpdated', Date.now());\n        } catch (error) {\n            logger.error('Increment stat error', error);\n        }\n    }\n    async resetStats() {\n        if (this.fallbackMode || !this.redis) {\n            return;\n        }\n        try {\n            await this.redis.del(STATS_KEY);\n            await this.redis.hset(STATS_KEY, 'lastReset', Date.now());\n        } catch (error) {\n            console.error('Reset stats error:', error);\n        }\n    }\n}\n// Export singleton instance\nconst airportCache = new AirportCacheService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/airportCache.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/circuitBreaker.ts":
/*!***********************************************!*\
  !*** ./src/server/services/circuitBreaker.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircuitBreaker: () => (/* binding */ CircuitBreaker),\n/* harmony export */   CircuitState: () => (/* binding */ CircuitState),\n/* harmony export */   ExponentialBackoff: () => (/* binding */ ExponentialBackoff)\n/* harmony export */ });\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(rsc)/./src/lib/cache/observability/index.ts\");\n// Circuit breaker pattern implementation for resilient service calls\n\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__.StructuredLogger('circuit-breaker', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__.prettyTransport);\nvar CircuitState = /*#__PURE__*/ function(CircuitState) {\n    CircuitState[\"CLOSED\"] = \"CLOSED\";\n    CircuitState[\"OPEN\"] = \"OPEN\";\n    CircuitState[\"HALF_OPEN\"] = \"HALF_OPEN\";\n    return CircuitState;\n}({});\nclass CircuitBreaker {\n    constructor(options){\n        this.state = \"CLOSED\";\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.halfOpenRequestCount = 0;\n        this.name = options.name;\n        this.failureThreshold = options.failureThreshold || 5;\n        this.resetTimeout = options.resetTimeout || 60000 // 1 minute\n        ;\n        this.monitoringPeriod = options.monitoringPeriod || 10000 // 10 seconds\n        ;\n        this.halfOpenRequests = options.halfOpenRequests || 3;\n        this.onStateChange = options.onStateChange;\n    }\n    async execute(fn) {\n        // Check if circuit should transition from OPEN to HALF_OPEN\n        if (this.state === \"OPEN\") {\n            if (this.shouldTransitionToHalfOpen()) {\n                this.transitionTo(\"HALF_OPEN\");\n            } else {\n                throw new Error(`Circuit breaker ${this.name} is OPEN`);\n            }\n        }\n        // In HALF_OPEN state, limit the number of requests\n        if (this.state === \"HALF_OPEN\") {\n            if (this.halfOpenRequestCount >= this.halfOpenRequests) {\n                throw new Error(`Circuit breaker ${this.name} is HALF_OPEN and at request limit`);\n            }\n            this.halfOpenRequestCount++;\n        }\n        try {\n            const result = await fn();\n            this.onSuccess();\n            return result;\n        } catch (error) {\n            this.onFailure();\n            throw error;\n        }\n    }\n    onSuccess() {\n        this.failureCount = 0;\n        this.successCount++;\n        if (this.state === \"HALF_OPEN\") {\n            // If all half-open requests succeed, close the circuit\n            if (this.successCount >= this.halfOpenRequests) {\n                this.transitionTo(\"CLOSED\");\n            }\n        }\n        logger.debug('Circuit breaker request succeeded', {\n            name: this.name,\n            state: this.state,\n            successCount: this.successCount\n        });\n    }\n    onFailure() {\n        this.failureCount++;\n        this.lastFailureTime = Date.now();\n        this.successCount = 0;\n        logger.warn('Circuit breaker request failed', {\n            name: this.name,\n            state: this.state,\n            failureCount: this.failureCount,\n            threshold: this.failureThreshold\n        });\n        if (this.state === \"HALF_OPEN\") {\n            // Any failure in HALF_OPEN state reopens the circuit\n            this.transitionTo(\"OPEN\");\n        } else if (this.state === \"CLOSED\" && this.failureCount >= this.failureThreshold) {\n            // Too many failures in CLOSED state opens the circuit\n            this.transitionTo(\"OPEN\");\n        }\n    }\n    shouldTransitionToHalfOpen() {\n        if (!this.lastFailureTime) return false;\n        return Date.now() - this.lastFailureTime >= this.resetTimeout;\n    }\n    transitionTo(newState) {\n        const oldState = this.state;\n        this.state = newState;\n        // Reset counters on state transition\n        if (newState === \"HALF_OPEN\") {\n            this.halfOpenRequestCount = 0;\n            this.successCount = 0;\n        } else if (newState === \"CLOSED\") {\n            this.failureCount = 0;\n            this.successCount = 0;\n            this.halfOpenRequestCount = 0;\n        }\n        logger.info('Circuit breaker state changed', {\n            name: this.name,\n            oldState,\n            newState\n        });\n        if (this.onStateChange) {\n            this.onStateChange(oldState, newState);\n        }\n    }\n    getState() {\n        return this.state;\n    }\n    getStats() {\n        return {\n            name: this.name,\n            state: this.state,\n            failureCount: this.failureCount,\n            successCount: this.successCount,\n            lastFailureTime: this.lastFailureTime,\n            halfOpenRequestCount: this.halfOpenRequestCount\n        };\n    }\n    reset() {\n        this.transitionTo(\"CLOSED\");\n        this.failureCount = 0;\n        this.successCount = 0;\n        this.lastFailureTime = undefined;\n        this.halfOpenRequestCount = 0;\n    }\n}\n// Exponential backoff helper\nclass ExponentialBackoff {\n    constructor(baseDelay = 1000, maxDelay = 30000, maxAttempts = 5){\n        this.attempt = 0;\n        this.baseDelay = baseDelay;\n        this.maxDelay = maxDelay;\n        this.maxAttempts = maxAttempts;\n    }\n    async execute(fn) {\n        let lastError = new Error('No attempts made');\n        for(let attempt = 0; attempt < this.maxAttempts; attempt++){\n            try {\n                const result = await fn();\n                this.reset();\n                return result;\n            } catch (error) {\n                lastError = error;\n                this.attempt = attempt + 1;\n                if (this.attempt >= this.maxAttempts) {\n                    logger.error('Max retry attempts reached', {\n                        attempts: this.attempt,\n                        maxAttempts: this.maxAttempts\n                    });\n                    throw error;\n                }\n                const delay = this.getDelay();\n                logger.warn('Retrying after backoff', {\n                    attempt: this.attempt,\n                    delay,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                });\n                await this.sleep(delay);\n            }\n        }\n        throw lastError;\n    }\n    getDelay() {\n        // Exponential backoff with jitter\n        const exponentialDelay = Math.min(this.baseDelay * Math.pow(2, this.attempt - 1), this.maxDelay);\n        // Add jitter (±25%)\n        const jitter = exponentialDelay * 0.25;\n        return Math.floor(exponentialDelay + (Math.random() * 2 - 1) * jitter);\n    }\n    sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    reset() {\n        this.attempt = 0;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/circuitBreaker.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/concurrencyManager.ts":
/*!***************************************************!*\
  !*** ./src/server/services/concurrencyManager.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConcurrencyManager: () => (/* binding */ ConcurrencyManager),\n/* harmony export */   concurrencyManager: () => (/* binding */ concurrencyManager)\n/* harmony export */ });\n/* harmony import */ var _redisClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./redisClient */ \"(rsc)/./src/server/services/redisClient.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_redisClient__WEBPACK_IMPORTED_MODULE_0__]);\n_redisClient__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Concurrency control for preventing duplicate API requests\n\nclass ConcurrencyManager {\n    async initialize() {\n        this.redis = await (0,_redisClient__WEBPACK_IMPORTED_MODULE_0__.getRedisClient)();\n    }\n    /**\n   * Acquire a distributed lock using Redis SETNX\n   */ async acquireLock(key, options = {}) {\n        const { ttl = 10, retries = 3, retryDelay = 100 } = options;\n        const lockKey = `lock:${key}`;\n        const token = `${Date.now()}-${Math.random()}`;\n        // If Redis is not available, use local locks\n        if (!this.redis) {\n            return this.acquireLocalLock(key, token);\n        }\n        for(let i = 0; i <= retries; i++){\n            try {\n                // Try to set the lock with NX (only if not exists) and EX (expiry)\n                const result = await this.redis.set(lockKey, token, 'NX', 'EX', ttl);\n                if (result === 'OK') {\n                    return {\n                        acquired: true,\n                        token\n                    };\n                }\n                // If not the last retry, wait before trying again\n                if (i < retries) {\n                    await new Promise((resolve)=>setTimeout(resolve, retryDelay));\n                }\n            } catch (error) {\n                console.error('Error acquiring lock:', error);\n                // Fall back to local lock on Redis error\n                return this.acquireLocalLock(key, token);\n            }\n        }\n        return {\n            acquired: false,\n            token: ''\n        };\n    }\n    /**\n   * Release a distributed lock\n   */ async releaseLock(key, token) {\n        const lockKey = `lock:${key}`;\n        if (!this.redis) {\n            return this.releaseLocalLock(key);\n        }\n        try {\n            // Lua script to ensure we only delete our own lock\n            const script = `\n        if redis.call(\"get\", KEYS[1]) == ARGV[1] then\n          return redis.call(\"del\", KEYS[1])\n        else\n          return 0\n        end\n      `;\n            const result = await this.redis.eval(script, 1, lockKey, token);\n            return result === 1;\n        } catch (error) {\n            console.error('Error releasing lock:', error);\n            return this.releaseLocalLock(key);\n        }\n    }\n    /**\n   * Execute a function with distributed locking\n   */ async withLock(key, fn, options = {}) {\n        const { acquired, token } = await this.acquireLock(key, options);\n        if (!acquired) {\n            throw new Error(`Failed to acquire lock for key: ${key}`);\n        }\n        try {\n            return await fn();\n        } finally{\n            await this.releaseLock(key, token);\n        }\n    }\n    /**\n   * Wait for an existing operation or start a new one\n   * This prevents duplicate operations for the same key\n   */ async deduplicateOperation(key, fn, options = {}) {\n        const operationKey = `operation:${key}`;\n        // Check if there's already an operation in progress locally\n        const existingOperation = this.localLocks.get(operationKey);\n        if (existingOperation) {\n            return existingOperation;\n        }\n        // Start a new operation with locking\n        const operation = this.withLock(key, fn, options).finally(()=>{\n            // Clean up local lock after operation completes\n            this.localLocks.delete(operationKey);\n        });\n        // Store the operation promise locally\n        this.localLocks.set(operationKey, operation);\n        return operation;\n    }\n    /**\n   * Local lock fallback when Redis is not available\n   */ acquireLocalLock(key, token) {\n        const lockKey = `lock:${key}`;\n        if (this.localLocks.has(lockKey)) {\n            return {\n                acquired: false,\n                token: ''\n            };\n        }\n        this.localLocks.set(lockKey, Promise.resolve(token));\n        return {\n            acquired: true,\n            token\n        };\n    }\n    /**\n   * Release local lock\n   */ releaseLocalLock(key) {\n        const lockKey = `lock:${key}`;\n        return this.localLocks.delete(lockKey);\n    }\n    constructor(){\n        this.redis = null;\n        this.localLocks = new Map();\n    }\n}\n// Export singleton instance\nconst concurrencyManager = new ConcurrencyManager();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/concurrencyManager.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/inMemoryCache.ts":
/*!**********************************************!*\
  !*** ./src/server/services/inMemoryCache.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache),\n/* harmony export */   inMemoryAirportCache: () => (/* binding */ inMemoryAirportCache)\n/* harmony export */ });\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(rsc)/./src/lib/cache/observability/index.ts\");\n// In-memory cache fallback implementation for when Redis is unavailable\n\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__.StructuredLogger('in-memory-cache', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_0__.prettyTransport);\nclass InMemoryCache {\n    constructor(maxSize = parseInt(process.env.IN_MEMORY_CACHE_MAX_SIZE || '1000', 10), evictionCheckInterval = parseInt(process.env.IN_MEMORY_CACHE_CLEANUP_INTERVAL || '300000', 10) // 5 minutes\n    ){\n        this.cache = new Map();\n        this.stats = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            lastReset: Date.now()\n        };\n        this.cleanupInterval = null;\n        this.maxSize = maxSize;\n        this.evictionCheckInterval = evictionCheckInterval;\n        this.startCleanupTimer();\n    }\n    async initialize() {\n        logger.info('In-memory cache initialized', {\n            maxSize: this.maxSize\n        });\n    }\n    async get(key) {\n        try {\n            const entry = this.cache.get(key);\n            if (!entry) {\n                this.stats.misses++;\n                return null;\n            }\n            // Check if expired\n            if (Date.now() > entry.expiresAt) {\n                this.cache.delete(key);\n                this.stats.misses++;\n                logger.debug('Cache entry expired', {\n                    key\n                });\n                return null;\n            }\n            this.stats.hits++;\n            return entry.item;\n        } catch (error) {\n            this.stats.errors++;\n            logger.error('Cache get error', error, {\n                key\n            });\n            return null;\n        }\n    }\n    async set(key, data, ttlSeconds) {\n        try {\n            // Enforce size limit with LRU eviction\n            if (this.cache.size >= this.maxSize) {\n                this.evictOldest();\n            }\n            const now = Date.now();\n            const cacheItem = {\n                data,\n                source: 'in-memory',\n                fetchedAt: now,\n                expiresAt: now + ttlSeconds * 1000\n            };\n            this.cache.set(key, {\n                item: cacheItem,\n                expiresAt: cacheItem.expiresAt\n            });\n            logger.debug('Cache entry set', {\n                key,\n                ttlSeconds\n            });\n        } catch (error) {\n            this.stats.errors++;\n            logger.error('Cache set error', error, {\n                key\n            });\n        }\n    }\n    async delete(key) {\n        try {\n            const existed = this.cache.has(key);\n            this.cache.delete(key);\n            return existed;\n        } catch (error) {\n            this.stats.errors++;\n            logger.error('Cache delete error', error, {\n                key\n            });\n            return false;\n        }\n    }\n    async exists(key) {\n        try {\n            const entry = this.cache.get(key);\n            if (!entry) return false;\n            // Check if expired\n            if (Date.now() > entry.expiresAt) {\n                this.cache.delete(key);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            this.stats.errors++;\n            logger.error('Cache exists error', error, {\n                key\n            });\n            return false;\n        }\n    }\n    async clear(pattern) {\n        try {\n            let deleted = 0;\n            if (!pattern) {\n                deleted = this.cache.size;\n                this.cache.clear();\n            } else {\n                // Simple pattern matching (supports * wildcard at end)\n                const regex = new RegExp('^' + pattern.replace(/\\*/g, '.*') + '$');\n                for (const [key] of this.cache){\n                    if (regex.test(key)) {\n                        this.cache.delete(key);\n                        deleted++;\n                    }\n                }\n            }\n            logger.info('Cache cleared', {\n                pattern,\n                deleted\n            });\n            return deleted;\n        } catch (error) {\n            this.stats.errors++;\n            logger.error('Cache clear error', error, {\n                pattern\n            });\n            return 0;\n        }\n    }\n    async getStats() {\n        return {\n            ...this.stats\n        };\n    }\n    async resetStats() {\n        this.stats = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            lastReset: Date.now()\n        };\n    }\n    evictOldest() {\n        let oldestKey = null;\n        let oldestTime = Infinity;\n        // Find the oldest entry\n        for (const [key, entry] of this.cache){\n            if (entry.item.fetchedAt < oldestTime) {\n                oldestTime = entry.item.fetchedAt;\n                oldestKey = key;\n            }\n        }\n        if (oldestKey) {\n            this.cache.delete(oldestKey);\n            logger.debug('Evicted oldest cache entry', {\n                key: oldestKey\n            });\n        }\n    }\n    cleanup() {\n        const now = Date.now();\n        let cleaned = 0;\n        for (const [key, entry] of this.cache){\n            if (now > entry.expiresAt) {\n                this.cache.delete(key);\n                cleaned++;\n            }\n        }\n        if (cleaned > 0) {\n            logger.info('Cleaned up expired entries', {\n                count: cleaned\n            });\n        }\n    }\n    startCleanupTimer() {\n        this.cleanupInterval = setInterval(()=>{\n            this.cleanup();\n        }, this.evictionCheckInterval);\n    }\n    destroy() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = null;\n        }\n        this.cache.clear();\n        logger.info('In-memory cache destroyed');\n    }\n}\n// Singleton instance for airport cache\nconst inMemoryAirportCache = new InMemoryCache();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/inMemoryCache.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/redisClient.ts":
/*!********************************************!*\
  !*** ./src/server/services/redisClient.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeRedisClient: () => (/* binding */ closeRedisClient),\n/* harmony export */   getRedisCircuitBreaker: () => (/* binding */ getRedisCircuitBreaker),\n/* harmony export */   getRedisClient: () => (/* binding */ getRedisClient),\n/* harmony export */   getRedisConfig: () => (/* binding */ getRedisConfig)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(rsc)/./src/lib/cache/observability/index.ts\");\n/* harmony import */ var _circuitBreaker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./circuitBreaker */ \"(rsc)/./src/server/services/circuitBreaker.ts\");\n/* harmony import */ var _secretsManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./secretsManager */ \"(rsc)/./src/server/services/secretsManager.ts\");\n// Redis client configuration and initialization\n\n\n\n\n// Load environment variables for server-side only\nif (true) {\n    await __webpack_require__.e(/*! import() */ \"vendor-chunks/dotenv@16.5.0\").then(__webpack_require__.t.bind(__webpack_require__, /*! dotenv */ \"(rsc)/./node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js\", 23)).then((mod)=>mod.config());\n}\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_1__.StructuredLogger('redis', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_1__.prettyTransport);\nlet redisClient = null;\nlet circuitBreaker = null;\nasync function getRedisConfig() {\n    const config = {};\n    // Initialize secrets manager\n    await _secretsManager__WEBPACK_IMPORTED_MODULE_3__.secretsManager.initialize();\n    const secrets = await _secretsManager__WEBPACK_IMPORTED_MODULE_3__.secretsManager.getAllSecrets();\n    if (true) {\n        config.url = \"redis://localhost:9021\";\n    } else {}\n    // TLS Configuration\n    if (process.env.REDIS_TLS_ENABLED === 'true') {\n        config.tls = {\n            rejectUnauthorized: process.env.REDIS_TLS_REJECT_UNAUTHORIZED !== 'false'\n        };\n        // Use secrets for TLS certificates\n        if (secrets.redisTlsCa) {\n            config.tls.ca = secrets.redisTlsCa;\n        }\n        if (secrets.redisTlsCert) {\n            config.tls.cert = secrets.redisTlsCert;\n        }\n        if (secrets.redisTlsKey) {\n            config.tls.key = secrets.redisTlsKey;\n        }\n        if (process.env.REDIS_TLS_SERVERNAME) {\n            config.tls.servername = process.env.REDIS_TLS_SERVERNAME;\n        }\n    }\n    // Connection resilience settings\n    config.maxRetriesPerRequest = 3;\n    config.enableReadyCheck = true;\n    config.retryStrategy = (times)=>{\n        if (times > 3) {\n            logger.error('Redis connection failed after 3 retries');\n            return null // Stop retrying\n            ;\n        }\n        const delay = Math.min(times * 200, 2000);\n        logger.warn(`Redis connection attempt ${times}, retrying in ${delay}ms`, {\n            attempt: times,\n            delay\n        });\n        return delay;\n    };\n    return config;\n}\n// Initialize circuit breaker for Redis operations\nfunction initializeCircuitBreaker() {\n    if (!circuitBreaker) {\n        circuitBreaker = new _circuitBreaker__WEBPACK_IMPORTED_MODULE_2__.CircuitBreaker({\n            name: 'redis',\n            failureThreshold: parseInt(process.env.REDIS_CIRCUIT_FAILURE_THRESHOLD || '5', 10),\n            resetTimeout: parseInt(process.env.REDIS_CIRCUIT_RESET_TIMEOUT || '60000', 10),\n            halfOpenRequests: parseInt(process.env.REDIS_CIRCUIT_HALF_OPEN_REQUESTS || '3', 10),\n            onStateChange: (oldState, newState)=>{\n                logger.warn('Redis circuit breaker state changed', {\n                    oldState,\n                    newState\n                });\n            }\n        });\n    }\n    return circuitBreaker;\n}\nasync function getRedisClient() {\n    // Only initialize Redis on server\n    if (false) {}\n    if (redisClient && redisClient.status === 'ready') {\n        return redisClient;\n    }\n    // Initialize circuit breaker\n    const breaker = initializeCircuitBreaker();\n    try {\n        // Use circuit breaker for connection attempt\n        return await breaker.execute(async ()=>{\n            const config = await getRedisConfig();\n            logger.info('Initializing Redis connection', {\n                host: config.host,\n                port: config.port,\n                url: config.url ? 'configured' : 'not configured'\n            });\n            redisClient = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(config.url || config);\n            redisClient.on('connect', ()=>{\n                logger.info('Redis client connected');\n            });\n            redisClient.on('error', (err)=>{\n                logger.error('Redis client error', err);\n            });\n            redisClient.on('ready', ()=>{\n                logger.info('Redis client ready to accept commands');\n            });\n            redisClient.on('close', ()=>{\n                logger.warn('Redis connection closed');\n            });\n            redisClient.on('reconnecting', (delay)=>{\n                logger.info('Redis reconnecting', {\n                    delay\n                });\n            });\n            // Test the connection\n            await redisClient.ping();\n            logger.info('Redis connection established and tested');\n            return redisClient;\n        });\n    } catch (error) {\n        logger.error('Failed to initialize Redis client', error);\n        redisClient = null;\n        return null;\n    }\n}\nfunction getRedisCircuitBreaker() {\n    return circuitBreaker || initializeCircuitBreaker();\n}\nasync function closeRedisClient() {\n    if (redisClient) {\n        logger.info('Closing Redis connection');\n        await redisClient.quit();\n        redisClient = null;\n    }\n}\n// Graceful shutdown\nif (true) {\n    process.on('SIGTERM', async ()=>{\n        await closeRedisClient();\n    });\n    process.on('SIGINT', async ()=>{\n        await closeRedisClient();\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/redisClient.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/secretsManager.ts":
/*!***********************************************!*\
  !*** ./src/server/services/secretsManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   secretsManager: () => (/* binding */ secretsManager)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_cache_observability__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/cache/observability */ \"(rsc)/./src/lib/cache/observability/index.ts\");\n// Secrets Manager for Redis and other sensitive credentials\n// Supports multiple secret sources: environment variables, files, and external services\n\n\n\n\nconst logger = new _lib_cache_observability__WEBPACK_IMPORTED_MODULE_3__.StructuredLogger('secrets-manager', {},  false ? 0 : _lib_cache_observability__WEBPACK_IMPORTED_MODULE_3__.prettyTransport);\nclass SecretsManager {\n    constructor(){\n        this.cache = new Map();\n        this.secretsPath = process.env.SECRETS_PATH || path__WEBPACK_IMPORTED_MODULE_1__.join(process.cwd(), '.secrets');\n        // Initialize encryption key from environment or generate one\n        if (process.env.SECRETS_ENCRYPTION_KEY) {\n            this.encryptionKey = Buffer.from(process.env.SECRETS_ENCRYPTION_KEY, 'hex');\n        }\n    }\n    async initialize() {\n        // Create secrets directory if it doesn't exist\n        try {\n            await fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdir(this.secretsPath, {\n                recursive: true,\n                mode: 448\n            });\n        } catch (error) {\n            logger.error('Failed to create secrets directory', error);\n        }\n    }\n    // Get secret from various sources\n    async getSecret(name, config) {\n        const cacheKey = `${config.source}:${name}`;\n        // Check cache first\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        let secret;\n        switch(config.source){\n            case 'env':\n                secret = process.env[config.key || name];\n                break;\n            case 'file':\n                secret = await this.readSecretFromFile(config.path || name);\n                break;\n            case 'vault':\n                secret = await this.readFromHashicorpVault(name, config);\n                break;\n            case 'aws-secrets-manager':\n                secret = await this.readFromAWSSecretsManager(name, config);\n                break;\n            case 'gcp-secret-manager':\n                secret = await this.readFromGCPSecretManager(name, config);\n                break;\n        }\n        // Decrypt if needed\n        if (secret && config.decrypt && this.encryptionKey) {\n            secret = this.decrypt(secret);\n        }\n        // Cache the secret\n        if (secret) {\n            this.cache.set(cacheKey, secret);\n        }\n        return secret;\n    }\n    // Read secret from file\n    async readSecretFromFile(filename) {\n        try {\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1__.isAbsolute(filename) ? filename : path__WEBPACK_IMPORTED_MODULE_1__.join(this.secretsPath, filename);\n            const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile(filePath, 'utf8');\n            return content.trim();\n        } catch (error) {\n            if (error.code !== 'ENOENT') {\n                logger.error(`Failed to read secret from file: ${filename}`, error);\n            }\n            return undefined;\n        }\n    }\n    // Placeholder for HashiCorp Vault integration\n    async readFromHashicorpVault(name, config) {\n        // Implementation would require vault client library\n        logger.warn('HashiCorp Vault integration not implemented', {\n            name\n        });\n        return undefined;\n    }\n    // Placeholder for AWS Secrets Manager integration\n    async readFromAWSSecretsManager(name, config) {\n        // Implementation would require AWS SDK\n        logger.warn('AWS Secrets Manager integration not implemented', {\n            name\n        });\n        return undefined;\n    }\n    // Placeholder for GCP Secret Manager integration\n    async readFromGCPSecretManager(name, config) {\n        // Implementation would require GCP client library\n        logger.warn('GCP Secret Manager integration not implemented', {\n            name\n        });\n        return undefined;\n    }\n    // Get all secrets with fallback to environment variables\n    async getAllSecrets() {\n        const secrets = {};\n        // Redis credentials\n        secrets.redisPassword = await this.getSecret('REDIS_PASSWORD', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'REDIS_PASSWORD'\n        }) || process.env.REDIS_PASSWORD;\n        secrets.redisUsername = await this.getSecret('REDIS_USERNAME', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'REDIS_USERNAME'\n        }) || process.env.REDIS_USERNAME || 'airport-app';\n        // TLS certificates\n        if (process.env.REDIS_TLS_ENABLED === 'true') {\n            secrets.redisTlsCa = await this.getSecret('REDIS_TLS_CA', {\n                source: 'file',\n                path: process.env.REDIS_TLS_CA || 'redis/tls/ca.crt'\n            });\n            secrets.redisTlsCert = await this.getSecret('REDIS_TLS_CERT', {\n                source: 'file',\n                path: process.env.REDIS_TLS_CERT || 'redis/tls/client.crt'\n            });\n            secrets.redisTlsKey = await this.getSecret('REDIS_TLS_KEY', {\n                source: 'file',\n                path: process.env.REDIS_TLS_KEY || 'redis/tls/client.key'\n            });\n        }\n        // API keys\n        secrets.apiNinjasKey = await this.getSecret('VITE_API_NINJAS_API_KEY', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'VITE_API_NINJAS_API_KEY'\n        });\n        secrets.openSkyUsername = await this.getSecret('VITE_OPENSKY_USERNAME', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'VITE_OPENSKY_USERNAME'\n        });\n        secrets.openSkyPassword = await this.getSecret('VITE_OPENSKY_PASSWORD', {\n            source: process.env.SECRETS_SOURCE || 'env',\n            key: 'VITE_OPENSKY_PASSWORD'\n        });\n        return secrets;\n    }\n    // Generate secure random password\n    generatePassword(length = 32) {\n        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=';\n        const randomBytes = crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(length);\n        let password = '';\n        for(let i = 0; i < length; i++){\n            password += charset[randomBytes[i] % charset.length];\n        }\n        return password;\n    }\n    // Save secret to file (for development/setup)\n    async saveSecret(name, value, encrypt = false) {\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1__.join(this.secretsPath, name);\n        let content = value;\n        if (encrypt && this.encryptionKey) {\n            content = this.encrypt(value);\n        }\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile(filePath, content, {\n            mode: 384\n        });\n        logger.info(`Secret saved: ${name}`);\n    }\n    // Simple encryption for at-rest protection\n    encrypt(text) {\n        if (!this.encryptionKey) {\n            throw new Error('Encryption key not configured');\n        }\n        const iv = crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(16);\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_2__.createCipheriv('aes-256-gcm', this.encryptionKey, iv);\n        let encrypted = cipher.update(text, 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n        const authTag = cipher.getAuthTag();\n        return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;\n    }\n    // Decrypt encrypted secrets\n    decrypt(encryptedText) {\n        if (!this.encryptionKey) {\n            throw new Error('Encryption key not configured');\n        }\n        const parts = encryptedText.split(':');\n        if (parts.length !== 3) {\n            throw new Error('Invalid encrypted format');\n        }\n        const iv = Buffer.from(parts[0], 'hex');\n        const authTag = Buffer.from(parts[1], 'hex');\n        const encrypted = parts[2];\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_2__.createDecipheriv('aes-256-gcm', this.encryptionKey, iv);\n        decipher.setAuthTag(authTag);\n        let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n        decrypted += decipher.final('utf8');\n        return decrypted;\n    }\n    // Clear cached secrets\n    clearCache() {\n        this.cache.clear();\n        logger.info('Secrets cache cleared');\n    }\n    // Rotate encryption key\n    async rotateEncryptionKey(newKey) {\n        const oldKey = this.encryptionKey;\n        this.encryptionKey = newKey;\n        // Re-encrypt all file-based secrets\n        const files = await fs_promises__WEBPACK_IMPORTED_MODULE_0__.readdir(this.secretsPath);\n        for (const file of files){\n            if (file.startsWith('.')) continue;\n            try {\n                const filePath = path__WEBPACK_IMPORTED_MODULE_1__.join(this.secretsPath, file);\n                const content = await fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile(filePath, 'utf8');\n                // Try to decrypt with old key\n                if (oldKey) {\n                    this.encryptionKey = oldKey;\n                    const decrypted = this.decrypt(content);\n                    // Re-encrypt with new key\n                    this.encryptionKey = newKey;\n                    const encrypted = this.encrypt(decrypted);\n                    await fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile(filePath, encrypted, {\n                        mode: 384\n                    });\n                }\n            } catch (error) {\n                logger.error(`Failed to rotate key for ${file}`, error);\n            }\n        }\n        logger.info('Encryption key rotated successfully');\n    }\n}\n// Export singleton instance\nconst secretsManager = new SecretsManager();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/secretsManager.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@15.1.5_@babel+core@7.27.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&page=%2Fapi%2Fairports%2F%5Bcode%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fairports%2F%5Bcode%5D%2Froute.ts&appDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frubeen%2Fdev%2Fpersonal%2Fairport-db&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();